{"code":"(this[\"webpackJsonpreact-complete-guide\"]=this[\"webpackJsonpreact-complete-guide\"]||[]).push([[0],[,,,,,,,,,,,,,,function(e,t,n){},function(e,t,n){},,function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){\"use strict\";n.r(t);var a=n(8),c=n.n(a),s=(n(14),n(5)),l=n(2),i=n(1),r=(n(15),n(0)),o=function(e){var t=e.date.toLocaleString(\"en-US\",{month:\"long\"}),n=e.date.toLocaleString(\"en-US\",{day:\"2-digit\"}),a=e.date.getFullYear();return Object(r.jsxs)(\"div\",{className:\"expense-date\",children:[Object(r.jsx)(\"div\",{className:\"expense-date__month\",children:t}),Object(r.jsx)(\"div\",{className:\"expense-date__year\",children:a}),Object(r.jsx)(\"div\",{className:\"expense-date__day\",children:n})]})},u=(n(17),function(e){var t=\"card \"+e.className;return Object(r.jsxs)(\"div\",{className:t,children:[e.children,\"    \"]})}),j=(n(18),function(e){return Object(r.jsx)(\"li\",{children:Object(r.jsxs)(u,{className:\"expense-item\",children:[\" \",Object(r.jsxs)(\"div\",{className:\"expense-item__description\",children:[Object(r.jsx)(o,{date:e.date}),\" \",Object(r.jsx)(\"h2\",{children:e.title}),\" \"]}),Object(r.jsxs)(\"div\",{className:\"expense-item__price\",children:[\"$\",e.amount]})]})})}),d=(n(19),function(e){return 0===e.passedFilteredExpenses.length?Object(r.jsx)(\"h2\",{className:\"expenses-list__fallback\",children:\"No Expenses Found\"}):Object(r.jsx)(\"ul\",{className:\"expenses-list\",children:e.passedFilteredExpenses.map((function(e){return Object(r.jsx)(j,{title:e.title,date:e.date,amount:e.amount},e.id)}))})}),b=(n(20),function(e){return Object(r.jsx)(\"div\",{className:\"expenses-filter\",children:Object(r.jsxs)(\"div\",{className:\"expenses-filter__control\",children:[Object(r.jsx)(\"label\",{children:\"Filter by year\"}),Object(r.jsxs)(\"select\",{value:e.selected,onChange:function(t){e.onChangeFilter(t.target.value)},children:[Object(r.jsx)(\"option\",{value:\"2022\",children:\"2022\"}),Object(r.jsx)(\"option\",{value:\"2021\",children:\"2021\"}),Object(r.jsx)(\"option\",{value:\"2020\",children:\"2020\"}),Object(r.jsx)(\"option\",{value:\"2019\",children:\"2019\"})]})]})})}),x=n(9),O=(n(21),function(e){var t=\"0%\";return e.maxValue>0&&(t=Math.round(e.value/e.maxValue*100)+\"%\"),Object(r.jsxs)(\"div\",{className:\"chart-bar\",children:[Object(r.jsx)(\"div\",{className:\"chart-bar__inner\",children:Object(r.jsx)(\"div\",{className:\"chart-bar__fill\",style:{height:t}})}),Object(r.jsx)(\"div\",{className:\"chart-bar__label\",children:e.label})]})}),m=(n(22),function(e){var t=e.dataPoints.map((function(e){return e.value})),n=Math.max.apply(Math,Object(s.a)(t));return Object(r.jsx)(\"div\",{className:\"chart\",children:e.dataPoints.map((function(e){return Object(r.jsx)(O,{value:e.value,maxValue:n,label:e.label},e.label)}))})}),v=function(e){var t,n=[{label:\"Jan\",value:0},{label:\"Feb\",value:0},{label:\"Mar\",value:0},{label:\"Apr\",value:0},{label:\"May\",value:0},{label:\"Jun\",value:0},{label:\"Jul\",value:0},{label:\"Aug\",value:0},{label:\"Sep\",value:0},{label:\"Oct\",value:0},{label:\"Nov\",value:0},{label:\"Dec\",value:0}],a=Object(x.a)(e.expenses);try{for(a.s();!(t=a.n()).done;){var c=t.value;n[c.date.getMonth()].value+=c.amount}}catch(s){a.e(s)}finally{a.f()}return Object(r.jsx)(m,{dataPoints:n})},h=(n(23),function(e){var t=Object(i.useState)(\"2021\"),n=Object(l.a)(t,2),a=n[0],c=n[1],s=e.items.filter((function(e){return e.date.getFullYear().toString()===a}));return console.log(s),Object(r.jsxs)(u,{className:\"expenses\",children:[Object(r.jsx)(b,{onChangeFilter:function(e){c(e),console.log(e)},selected:a}),\" \",Object(r.jsx)(v,{expenses:s}),Object(r.jsx)(d,{passedFilteredExpenses:s}),\" \"]})}),p=n(7),f=(n(24),function(e){var t=Object(i.useState)(\"\"),n=Object(l.a)(t,2),a=n[0],c=n[1],s=Object(i.useState)(\"\"),o=Object(l.a)(s,2),u=o[0],j=o[1],d=Object(i.useState)(\"\"),b=Object(l.a)(d,2),x=b[0],O=b[1];return Object(r.jsxs)(\"form\",{onSubmit:function(t){t.preventDefault();var n={title:a,amount:+u,date:new Date(x)};e.onSaveExpenseData(n),c(\"\"),j(\"\"),O(\"\")},children:[Object(r.jsxs)(\"div\",{className:\"expense-form\",children:[Object(r.jsxs)(\"div\",{className:\"expense-form__control\",children:[Object(r.jsx)(\"label\",{children:\"Title\"}),Object(r.jsx)(\"input\",{type:\"text\",value:a,onChange:function(e){c(e.target.value)}})]}),Object(r.jsxs)(\"div\",{className:\"expense-form__control\",children:[Object(r.jsx)(\"label\",{children:\"Amount\"}),Object(r.jsx)(\"input\",{type:\"number\",min:\"0.01\",step:\"0.01\",value:u,onChange:function(e){j(e.target.value)}})]}),Object(r.jsxs)(\"div\",{className:\"expense-form__control\",children:[Object(r.jsx)(\"label\",{children:\"Date\"}),Object(r.jsx)(\"input\",{type:\"date\",min:\"2019-01-01\",max:\"2022-12-31\",value:x,onChange:function(e){O(e.target.value)}})]})]}),Object(r.jsxs)(\"div\",{className:\"expense-form__actions\",children:[Object(r.jsx)(\"button\",{type:\"button\",onClick:e.onCancel,children:\"Cancel\"}),Object(r.jsx)(\"button\",{type:\"submit\",children:\"Add Expense\"})]})]})}),N=(n(25),function(e){var t=Object(i.useState)(!1),n=Object(l.a)(t,2),a=n[0],c=n[1];return Object(r.jsxs)(\"div\",{className:\"new-expense\",children:[!a&&Object(r.jsx)(\"button\",{onClick:function(){c(!0)},children:\"Add New Expense\"}),a&&Object(r.jsx)(f,{onSaveExpenseData:function(t){var n=Object(p.a)(Object(p.a)({},t),{},{id:Math.random().toString()});e.onAddExpense(n),c(!1)},onCancel:function(){c(!1)}})]})}),g=[{id:\"e1\",title:\"Car Insurance\",date:new Date(2021,12,28),amount:300.18},{id:\"e2\",title:\"Toilet Paper\",date:new Date(2021,11,20),amount:265.35},{id:\"e3\",title:\"New TV\",date:new Date(2021,8,20),amount:465.25},{id:\"e4\",title:\"New Bed\",date:new Date(2021,1,20),amount:600.87}],_=function(){var e=Object(i.useState)(g),t=Object(l.a)(e,2),n=t[0],a=t[1];return Object(r.jsxs)(\"div\",{children:[Object(r.jsx)(N,{onAddExpense:function(e){console.log(\"Getting Form Expense Data from App.js\"),a((function(t){return[e].concat(Object(s.a)(t))}))}}),Object(r.jsx)(h,{items:n})]})};c.a.render(Object(r.jsx)(_,{}),document.getElementById(\"root\"))}],[[26,1,2]]]);","name":"static/js/main.38abd649.chunk.js","map":{"version":3,"sources":["static/js/main.38abd649.chunk.js"],"names":["this","push","module","exports","__webpack_require__","__webpack_exports__","r","react_dom","react_dom_default","n","toConsumableArray","slicedToArray","react","jsx_runtime","components_Expenses_ExpenseDate","props","month","date","toLocaleString","day","year","getFullYear","Object","className","children","components_UI_Card","classes","components_Expenses_ExpenseItem","title","amount","components_Expenses_ExpensesList","passedFilteredExpenses","length","map","expense","id","components_Expenses_ExpensesFilter","value","selected","onChange","event","onChangeFilter","target","createForOfIteratorHelper","components_Chart_ChartBar","barFillHeight","maxValue","Math","round","style","height","label","components_Chart_Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","max","apply","Expenses_ExpensesChart","_step","chartDataPoints","_iterator","expenses","s","done","getMonth","err","e","f","components_Expenses_Expenses","_useState","_useState2","filteredYear","setFilteredYear","filteredExpenses","items","filter","filterByYear","toString","console","log","selectedYear","objectSpread2","components_NewExpense_ExpenseForm","titleEntered","setTitleEntered","_useState3","_useState4","amountEntered","setAmountEntered","_useState5","_useState6","dateEntered","setDateEntered","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","onClick","onCancel","components_NewExpense_NewExpense","isEditing","setIsEditing","enteredExpenseData","random","onAddExpense","DUMMY_INITIAL_EXPENSES","src_App","addedExpense","setAddedExpense","prevExpenses","concat","a","render","document","getElementById"],"mappings":"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"},"input":"(this[\"webpackJsonpreact-complete-guide\"] = this[\"webpackJsonpreact-complete-guide\"] || []).push([[0],[\n/* 0 */,\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */,\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */,\n/* 10 */,\n/* 11 */,\n/* 12 */,\n/* 13 */,\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n/* 16 */,\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n/* 26 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(8);\nvar react_dom_default = /*#__PURE__*/__webpack_require__.n(react_dom);\n\n// EXTERNAL MODULE: ./src/index.css\nvar src = __webpack_require__(14);\n\n// EXTERNAL MODULE: ./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 3 modules\nvar toConsumableArray = __webpack_require__(5);\n\n// EXTERNAL MODULE: ./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 3 modules\nvar slicedToArray = __webpack_require__(2);\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(1);\n\n// EXTERNAL MODULE: ./src/components/Expenses/ExpenseDate.css\nvar Expenses_ExpenseDate = __webpack_require__(15);\n\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/components/Expenses/ExpenseDate.js\n// ARROW FUNCTION \nvar ExpenseDate_ExpenseDate=function ExpenseDate(props){var month=props.date.toLocaleString(\"en-US\",{month:\"long\"});var day=props.date.toLocaleString(\"en-US\",{day:\"2-digit\"});var year=props.date.getFullYear();return/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"div\",{className:\"expense-date\",children:[/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"div\",{className:\"expense-date__month\",children:month}),/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"div\",{className:\"expense-date__year\",children:year}),/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"div\",{className:\"expense-date__day\",children:day})]});};/* harmony default export */ var components_Expenses_ExpenseDate = (ExpenseDate_ExpenseDate);\n// EXTERNAL MODULE: ./src/components/UI/Card.css\nvar UI_Card = __webpack_require__(17);\n\n// CONCATENATED MODULE: ./src/components/UI/Card.js\n// Special type of component that acts as a ROOT custom element in other components/files.\n// This component is going to be used as a *** Wrapper or ROOT/MAIN *** custom element in other files/components, that wraps\n// all the JSX code inside.\n// Inorder for this component to be able to act as a ROOT custom element (in other components), it has to have the \"props.children\" react \n// feature, which enables it to become a ROOT custom element in other components/files.\n// \"props.children\" is a speacial prop that is built into react. Every component recieves the \"props.children\" prop automatically, even if we're\n// not setting it explicitly.\n// ******* THE VALUE OF THE \"children\" prop ---> is always the content between the opening and closing Wrapper or Root/MAIN tags of the custom component element \n// (that we add in other components/files). [ie: <Card>......(\"children\" value)......</Card>]\n// ARROW FUNCTION \nvar Card_Card=function Card(props){var classes=\"card \"+props.className;/* Inorder to be able to use classes in a ROOT custom react element --> we need to write\r\n                                                    this code which adds the other classes in those elements (to a long list of class names), next \r\n                                                    to the class that we have here, and thus using them aswell */return/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"div\",{className:classes,children:[props.children,\"    \"]});};/* harmony default export */ var components_UI_Card = (Card_Card);\n// EXTERNAL MODULE: ./src/components/Expenses/ExpenseItem.css\nvar Expenses_ExpenseItem = __webpack_require__(18);\n\n// CONCATENATED MODULE: ./src/components/Expenses/ExpenseItem.js\n// In previous versions of React we HAD to add this React import, which transforms JSX code (under the hood) \n// to HTML code that is readable by the browser. JSX (HTML in Javascript) is NOT READABLE by the browser.\n// In newer versions of react tho, we dont need this import, but the code is STILL being transformed to HTML \n// code, under the hood. [This was added to every single file in REACT back in the day.]\n// \"React\" is a DEFAULT IMPORT. \", {...}\" is a NAMED IMPORT, which lets us import specific pieces from the react library.\n// **************** Importing other CSS files here ****************\n// When adding css code --> create a file in the components folder with the same name as the component file\n// ie: \"ExpenseItem.css\"\n// Then we need to import the css file here [AT THE TOP]\n// **************** How to name Component files in react ****************\n// When naming component files in react, every word in capitalized. Ex: \"ExpenseItem.js\"\n// *** It is considered good practice to create new files for different components, so that we have one file per component.\n// ***********************************************************************************************************************************\n// **************** What is a Component? ****************\n// A COMPONENT IN REACT, IS JUST A JAVASCRIPT FUNCTION that returns JSX code.\n// The conventional way of naming a function in a component in react, is to name it the same thing as the file name.\n// ***********************************************************************************************************************************\n// ****************************** ONE ROOT element in the return function ******************************\n// In React there is an important RULE regarding the JSX code (HTML code in Javascript), that we return inside a component:\n// *** Which is that it MUST ONLY have ONE ROOT ELEMENT per RETURN STATEMENT (or JSX code snippet).\n// For example: We can't have two divs next to each other, ie: <div>....</div><div>...</div> [NOT ALLOWED BY REACT]\n// **** The way around it is to wrap all of the elements inside ONE ROOT/MAIN div -->>\n// ***********************************************************************************************************************************\n// ****************************** How to use Javascript in JSX code ******************************\n// To output dynamic data (data that can be changed by the user) we use a special syntax by React, INSIDE of the JSX code snippets.\n// The special syntax is curly braces\"{}\" where javascript expressions can be insert into.\n// ***********************************************************************************************************************************\n// ************************************* HOW TO SHARE DATA BETWEEN REACT COMPONENTS *************************************************\n// **************** We make functions in components reusable, by giving it a parameter (\"props\") ****************\n// SECOND PART\n// In React, Only ONE PARAMTER is needed to hold ALL of the received attributes as properties, hence its name \"Props\"\n// All received properties come from the \"App.js\" file, where we create a custom React element that takes in attribites with the properties\n// This ONE PARAMATER is ussaully named \"props\" (can be named anything tho). It is a Javascript OBJECT, which is why it can hold all of\n// the attribute properties for our custom element that are stated in the \"App.js\" file.\n/* FINALLY, after we create the properties and insert them into the custom React elements in the \"App.js\", we THEN add the \"props\" parameter\r\n   to the function here --> then reference to attributes we created in the \"App.js\" by using their \"key\" names, otherwise it wont't work\r\n    (ie: props.{name of the attribute we stated in the \"App.js\"} )*/ // IN SHORT --> WE GET ALL THE DATA WE NEED FROM OUTSIDE OF THIS COMPONENT (\"App.js\"), AND USE IT HERE BY ACCESSING THIS\n//            DATA/PROPERTIES THROUGH A PARAMeTER (\"props\").\n// SO the properties are defined in \"App.js\" and then passed here, inorder to have different usages, through attributes.\n// ***********************************************************************************************************************************\n// ****************************** Adding Events in REACT ******************************\n// Ex:   <button onClick={ () => {console.log(\"Button Clickedd!!!\")} }> Click me </button> \n// In react you add an EVENT to the button element (as an attribute), that does something when the button is clicked.\n// All react EVENTS start with \"on....\". ie: \"onclick\"\n// ***Anonymous Arrow function*** ----> () => {....}\n// ********** EVENTS IN React takes in Javascript functions ONLY. (ie: onclick = { () => {.......} } )\n// When witing a javascipt function in an event function --> DO NOT INCLUDE THE BRACKETS TO THE JAVASCRIPT FUNCTION \n// ie: \"<button onclick= { clickHandler }></button>\"  ----> clickHandler doesnt have brackets\n// We can use a wide variety of events, like \"setTimeout()\" for example. Check the HTML events Doc for all the list of events we can use.\n// ***********************************************************************************************************************************\n// ****************************** State in REACT ******************************\n// React only renders the component functions ONCE and thats it, which as a result does not let us update something on the web browser\n// thats already been rendered, like a text wouldnt change if we click a button.\n// This is where STATE comes in, which allows us to define values as state, where changes in these values WILL reflect on component\n// functions thats being called again, and make them change on screen/browser.\n// \"useState\" is a REACT HOOK. ALL REACT HOOKS start with a \"use...\" word.\n// All react HOOKS MUST be called INSIDE of react component functions. Not in nested functions tho.\n// \"useState\" ALWAYS returns an ARRAY with exactly TWO elements.\n// The \"useState\" HOOK, RE-EXECUTES or CALLS the WHOLE component AGAIN when the state changes, NOT just the variable that we want to change.\n/* Steps: 1. Add \", { useState}\" in the \"import React from \"react\";\", inorder to use this feature in this component.\r\n          2. Then call the \"useState()\" (HOOK) INSIDE the component function. And add an argument/parameter to it.\r\n              That parameter should be a default or INITIAL value of the thing that we want to change on the screen when the event happens. \r\n              ie: \"useState(props.title)\"\r\n          3. To assign a new value to \"props.title\", we then use the ES6 feature called ARRAY DESTRUCTING to assign that new value.\r\n             The Array destructing takes in 2 elements (WE CAN CHOOSE their NAMES to be ANYTHING we want, order is what matters)\r\n              The FIRST element is the name for the DEFAULT value that we want to change**\r\n              The SECOND element is the name of a function that we can later call whenever we want to change the default value \r\n              of \"props.title**\r\n              Like this --> \"const [title, setTitle] = useState(props.title);\"\"  \r\n                            so ------> \"title\" is equal to \"props.title\" and\r\n                                        \"setTitle\" is a function that can later be called to \r\n                                                    set a new value to \"props.title\" to.\r\n            5. To assign the new value --> we call the SECOND element function and then pass the NEW value as an \r\n               argument/parameter inside it. \r\n               ie: \"setTitle( \"NEW TITLEEEEE\" );\" \r\n            6. Lastly, we add the FIRST ELEMENT in the JSX code (in between curly braces), where we want to ouput that new value\r\n               (ie: <h2> {title} </h2>)*/ // ***********************************************************************************************************************************\n// ******** Javascript syntax ********\n// A \"const\" is a variable that may never change.\n// \"Date()\" is a built-in constructor that comes witH JavaScript.\n// \"toISOString()\" returns a Date object as a String, using the ISO standard.\n// \"toLocaleString()\" method returns a string with a language sensitive representation of this date.\n// \"getFullYear()\" method returns the year of the specified date according to local time.\n// ARROW FUNCTION \nvar ExpenseItem_ExpenseItem=function ExpenseItem(props){// const [title, setTitle] = useState(props.title);       // ES6 Array Destructing. Use naming conventions similar to this. [check top for explanation on \"State\"]\n// const clickHandler = () => {         // Use the word\"Handler\" to make it clear that this will be called upon an Event\n//   setTitle(\"Update Title\");          // \"setTitle\" is the name of second element that comes from the destructing array (which is a function).\n// };\nreturn/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"li\",{children:/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(components_UI_Card,{className:\"expense-item\",children:[\" \",/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"div\",{className:\"expense-item__description\",children:[/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(components_Expenses_ExpenseDate,{date:props.date}),\" \",/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"h2\",{children:props.title}),\" \"]}),/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"div\",{className:\"expense-item__price\",children:[\"$\",props.amount]})]})});};// to use the component, we need to export it or export the function in this file. (**write the name of the function, WITHOUT BRACES)\n/* harmony default export */ var components_Expenses_ExpenseItem = (ExpenseItem_ExpenseItem);// after exporting this file, we can then import it in the \"App.js\" file where all the other components will be imported or nested to.\n// Summary: WE ALWAYS DO THESE STEPS WHEN CREATING A NEW COMPONENT IN REACT ==>\n//           1. Create a component file and add a function which return HTML code (just like this one)\n//           2. We then \"export\" it (in the same file)\n//           3. Then \"import\" it in the file that we want to use it in (\"ussually \"App.js\").\n//           4. There we can Use it like an HTML element [but starting with an uppercase character] in the file\n//              it is imported in (ussually the \"App.js\" file).\n// EXTERNAL MODULE: ./src/components/Expenses/ExpensesList.css\nvar Expenses_ExpensesList = __webpack_require__(19);\n\n// CONCATENATED MODULE: ./src/components/Expenses/ExpensesList.js\nvar ExpensesList_ExpensesList=function ExpensesList(props){// If we have no registered expenses for a specific year ---> display a message \nif(props.passedFilteredExpenses.length===0){return/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"h2\",{className:\"expenses-list__fallback\",children:\"No Expenses Found\"});}// This explanation is when we had the above function with \".map\" inside the retrun function (as JSX code). Not any more tho since we moved the logic outside of the return function.\n/* Rendering the \"expenses\" Array (in \"App.js\") Dynamically \r\n            1. Creat curly braces \"{...}* because we will execute a dynamic javascript expression in JSX code, which is why we need the curly braces.\r\n            2. Reference the \"expenses\" array (in \"App.js\") through \"props\" and its attribute name in the \"<expenses />\" custom element. (ie: \"props.items\")\r\n            3. Use the \"map()\" javascript function to create a new array (through its paramter), based on another array (\"expenses\" array in this case,\r\n               which we acces through \"props.items\")\r\n          SO FOR EACH OBJECT IN THE \"expense\" ARRAY, \"map()\" creates a new \"ExpenseItem\" with the properties from the corresponding \"expense\" array object.  */return/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"ul\",{className:\"expenses-list\",children:props.passedFilteredExpenses.map(function(expense){return/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(components_Expenses_ExpenseItem,{// **** always add a KEY when mapping out a list of items, inorder to avoid errors in the console. React needs to uniquely identify every element it adds inorder to be efficient and not go over the whole list of items everytime we add a new item. If we dont add a KEY, react will update ALL the items in the array and replaces their content such that they match the old content of the array, after adding the new item. WHICH IS INEFFIECIENT performance wise AND CAN CAUSE BUGS.\ntitle:expense.title,date:expense.date,amount:expense.amount},expense.id);})});};/* harmony default export */ var components_Expenses_ExpensesList = (ExpensesList_ExpensesList);\n// EXTERNAL MODULE: ./src/components/Expenses/ExpensesFilter.css\nvar Expenses_ExpensesFilter = __webpack_require__(20);\n\n// CONCATENATED MODULE: ./src/components/Expenses/ExpensesFilter.js\nvar ExpensesFilter_ExpensesFilter=function ExpensesFilter(props){var dropdownChangeHandler=function dropdownChangeHandler(event){props.onChangeFilter(event.target.value);};return/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"div\",{className:\"expenses-filter\",children:/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"div\",{className:\"expenses-filter__control\",children:[/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"label\",{children:\"Filter by year\"}),/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"select\",{value:props.selected,onChange:dropdownChangeHandler,children:[/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"option\",{value:\"2022\",children:\"2022\"}),/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"option\",{value:\"2021\",children:\"2021\"}),/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"option\",{value:\"2020\",children:\"2020\"}),/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"option\",{value:\"2019\",children:\"2019\"})]})]})});};/* harmony default export */ var components_Expenses_ExpensesFilter = (ExpensesFilter_ExpensesFilter);\n// EXTERNAL MODULE: ./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\nvar createForOfIteratorHelper = __webpack_require__(9);\n\n// EXTERNAL MODULE: ./src/components/Chart/ChartBar.css\nvar Chart_ChartBar = __webpack_require__(21);\n\n// CONCATENATED MODULE: ./src/components/Chart/ChartBar.js\nvar ChartBar_ChartBar=function ChartBar(props){var barFillHeight='0%';if(props.maxValue>0){barFillHeight=Math.round(props.value/props.maxValue*100)+'%';}return/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"div\",{className:\"chart-bar\",children:[/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"div\",{className:\"chart-bar__inner\",children:/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"div\",{className:\"chart-bar__fill\",style:{height:barFillHeight}})}),/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"div\",{className:\"chart-bar__label\",children:props.label})]});};/* harmony default export */ var components_Chart_ChartBar = (ChartBar_ChartBar);\n// EXTERNAL MODULE: ./src/components/Chart/Chart.css\nvar Chart_Chart = __webpack_require__(22);\n\n// CONCATENATED MODULE: ./src/components/Chart/Chart.js\nvar Chart_Chart_Chart=function Chart(props){var dataPointValues=props.dataPoints.map(function(dataPoint){return dataPoint.value;});var totalMaximum=Math.max.apply(Math,Object(toConsumableArray[\"a\" /* default */])(dataPointValues));return/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"div\",{className:\"chart\",children:props.dataPoints.map(function(dataPoint){return/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(components_Chart_ChartBar,{value:dataPoint.value,maxValue:totalMaximum,label:dataPoint.label},dataPoint.label);})});};/* harmony default export */ var components_Chart_Chart = (Chart_Chart_Chart);\n// CONCATENATED MODULE: ./src/components/Expenses/ExpensesChart.js\nvar ExpensesChart_ExpensesChart=function ExpensesChart(props){var chartDataPoints=[{label:'Jan',value:0},{label:'Feb',value:0},{label:'Mar',value:0},{label:'Apr',value:0},{label:'May',value:0},{label:'Jun',value:0},{label:'Jul',value:0},{label:'Aug',value:0},{label:'Sep',value:0},{label:'Oct',value:0},{label:'Nov',value:0},{label:'Dec',value:0}];var _iterator=Object(createForOfIteratorHelper[\"a\" /* default */])(props.expenses),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var expense=_step.value;var expenseMonth=expense.date.getMonth();// starting at 0 => January => 0\nchartDataPoints[expenseMonth].value+=expense.amount;}}catch(err){_iterator.e(err);}finally{_iterator.f();}return/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(components_Chart_Chart,{dataPoints:chartDataPoints});};/* harmony default export */ var Expenses_ExpensesChart = (ExpensesChart_ExpensesChart);\n// EXTERNAL MODULE: ./src/components/Expenses/Expenses.css\nvar Expenses_Expenses = __webpack_require__(23);\n\n// CONCATENATED MODULE: ./src/components/Expenses/Expenses.js\n// ****** JavaScipt *******\n// The \"map()\" method creates a new array with the results of calling a function for every array element.\n// The \"filter()\" method creates a new array with all elements that pass the test implemented by the provided function.\n// *************************************************************************************************************\n// ****** Conditional Expressions in React *******\n// Long statements like (\"if\" condition and \"for\" loop) are not allowed inside JSX code, between curly braces \"{...}\".\n// INSTEAD we can use a TERNARY EXPRESSION.\n// ie: {filteredExpenses === 0 ? <p>Write a message</p> : // otherwise fo something else}\n// another expression we can use --> {filteredExpenses === 0 && <p>Write a message</p>}  //means if filteredExpenses is equal to 0 --> then add the <p></p> element\n/* same as {if (filteredExpenses === 0) {\r\n              <p>Write a message</p>\r\n           }\r\n           else\r\n           {\r\n            // do something else\r\n           }};    */ // DIDNT USE A TERNARY EXPRESSION HERE THO, INSTEAD I MOVED THE LOGIC OUT OF THE RETURN FUNCTION, SO THAT IT WOULD NOT BE JSX CODE AND\n// AND I CAN USE A REGULAR JAVASCRIPT CONDITION.\n// *************************************************************************************************************\nvar Expenses_Expenses_Expenses=function Expenses(props){var _useState=Object(react[\"useState\"])(\"2021\"),_useState2=Object(slicedToArray[\"a\" /* default */])(_useState,2),filteredYear=_useState2[0],setFilteredYear=_useState2[1];var filterChangeHandler=function filterChangeHandler(selectedYear){setFilteredYear(selectedYear);console.log(selectedYear);};// this function filters the \"items\" array (which we get from the \"App.js\" file) by the year that we choose from the drop down.\n// \"filteredYear\" is a STRING, where as our \"date\" is a date OBJEC --> which is why we have to \"getFullYear()\" first, and then convert it \"toString()\".\nvar filteredExpenses=props.items.filter(function(filterByYear){return filterByYear.date.getFullYear().toString()===filteredYear;});console.log(filteredExpenses);return/*#__PURE__*/ (/* Must have one ROOT JSX element, that wraps around the main JSX code */Object(jsx_runtime[\"jsxs\"])(components_UI_Card,{className:\"expenses\",children:[/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(components_Expenses_ExpensesFilter,{onChangeFilter:filterChangeHandler,selected:filteredYear}),\" \",/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(Expenses_ExpensesChart,{expenses:filteredExpenses}),/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(components_Expenses_ExpensesList,{passedFilteredExpenses:filteredExpenses}),\" \"]}));};/* harmony default export */ var components_Expenses_Expenses = (Expenses_Expenses_Expenses);\n// EXTERNAL MODULE: ./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js + 1 modules\nvar objectSpread2 = __webpack_require__(7);\n\n// EXTERNAL MODULE: ./src/components/NewExpense/ExpenseForm.css\nvar NewExpense_ExpenseForm = __webpack_require__(24);\n\n// CONCATENATED MODULE: ./src/components/NewExpense/ExpenseForm.js\n// Event listeners (listens to an event) in React:\n// \"onInput\" ---> listens/triggers on every KEYSTROKE, can only be used for\n// \"onChange\" ---> also listens/triggers on every KEYSTROKE, but the advantage of it is that it can be used for every type of input\n//                 (for example: also for drop menus)\n// \"onSubmit\" ---> if a button with type submit (ie: <button type:\"submit\"> Click Me </button>), is pressed inside of a form in a web browser, then the\n//                 overall <form> HTML element will emmit an event to which we can listen to by adding the \"onSubmit\" event listener as an attribute to\n//                 the form element.\n/*********************************************** PASSING DATA from CHILD-TO-PARENT COMPONENTS ***********************************************/ /* After storing the data and combining it into a JavaScript object ---> Now we want to pass it to the \"App.js\" component which has the list of existing expenses */ /* Inorder to do so, we first have to pass it to the \"NewExpense.js\" component and THEN to the \"App.js\" because \"App.js\" is accessing the expense form (this component)\r\n     through the \"NewExpense.js\" component. SO WE CANNOT SKIP COMPONENTS IN BETWEEN.  **** \"PROPS\" CAN ONLY BE PASSED FROM PARENT TO CHILD. **** */ /* So to pass data up from Child to Parent components, we do is this: \r\n                                    1. Pass a function from a Parent component to a Child component \r\n                                    2. Then call that function inside the child component \r\n                                    3. When we call that function in the child component, we can then pass the DATA into that function as a parameter.*/ /* Steps: 1. Create a function and an attribute in the Parent of this component (\"NewExpense.js\") ----> \r\n                        a. Create a function in \"NewExpense.js\" component with a paramter (any name for parameter). And inside this function, create a JavaScript \r\n                           object that pulls the data from the \"expenseDate\" javascript object here in this component, using the spread operator. \r\n                             (ie: const saveEnteredDataHandler = (enteredExpenseData) {\r\n                                        const expenseData = {\r\n                                            ...enteredExpenseData,\r\n                                            id: Math.Random().toString;\r\n                                        }\r\n                                  })\r\n                        b. Add a new attribiute/prop to the \"expenseForm\" element in \"NewExpense.js\" component. Can name the attribute anything we want, but \r\n                           using \"on\" in the name makes it clear that the value of this attribute/prop should be a function that will be triggered, when the form is\r\n                           submitted. The value of this attribute/prop is a function that will then be called inside the \"ExpenseForm.js\" compoent (this component).\r\n                            (ie: <expenseForm onSaveExpenseData={saveEnteredDataHandler} />  \r\n                                **** THIS ATTRIBUTE PASSES ITS VALUE, TO THE EXPENSE FORM ****\r\n                \r\n                2. Use this function in the CHILD component (this compoenet): \r\n                                a. Add the \"props\" keyword as an attribute to this component's function. \r\n                                b. Call the function we created in its Parent component (\"saveEnteredDataHandler\") in the Child component (this one), inside\r\n                                   the \"formHandler\" function, through \"props\". And pass in the \"expenseData\" javascript object as a parameter inside it.\r\n                                        (ie: props.onSaveExpenseData(expenseData);)  *** USE THE NAME OF THE ATTRIBUTE *** \r\n                                                ** here the parameter passes the \"expenseData\" javascript object properties (in this component) \r\n                                                   into the \"saveEnteredDataHandler\" function, in the \"newExpenseData\" component, through its parameter. **\r\n                                 \r\n                3. Then, in the \"App.js\" component do the same thing:\r\n                                a. add a function with a paramter. (The paramter will let get the expenses data from the \"NewExpense.js\" component, when \r\n                                    we use it there using \"props\")\r\n                                        (ie: const addExpenseHandler = (expense) => {\r\n                                                    console.log(expense);\r\n                                              };)\r\n                                b. add an attribute to the \"NewExpense\" element in \"App.js\" (give it any name), with a the function we created, as a value\r\n                                        (ie: <NewExpense onAddExpense={addExpenseHandler} />)   \r\n                \r\n                4. Lastly, in \"NewExpense.js\" component: \r\n                                a. Add the \"props\" keyword as an attribute to the component's function \r\n                                b. Call the function we created in its Parent component (\"App.js\"), inside\r\n                                   the \"saveEnteredDataHandler\" function, through \"props\". And pass in the \"expenseData\" javascript object as a parameter inside it.\r\n                                    (ie: props.onAddExpense(expenseData))               */ // *************************************************************************************************************************************************************x\n// \"props\" lets us access attribute values (which have functions), from parent components or other components.\nvar ExpenseForm_ExpenseForm=function ExpenseForm(props){/* After we get the key value of the KEY PRESSED --> we want to store it somewhere inorder to use that value.\r\n     Inother words, we want to gather all the values, for ALL the inputs, and combine them as an object, when the form is submitted.\r\n     SO Inorder to store these values, and make sure they survive if the this component/function is re-executed --> WE USE THE \"useState\" HOOK. */ // YOU CAN HAVE MULTIPLE STATES PER COMPONENT/FUNCTION. (each one is seperate from the other)\nvar _useState=Object(react[\"useState\"])(\"\"),_useState2=Object(slicedToArray[\"a\" /* default */])(_useState,2),titleEntered=_useState2[0],setTitleEntered=_useState2[1];/* We use the \"useState\" HOOK here, inorder to STORE the key press values that we enter in the title input,\r\n                                                              INTO OUR STATE or into a VARIABLE (\"titleEntered\"). \r\n                                                              So that the stored key press values in the state SURVIVES if we re-execute the component.*/ // The \"useState\" parameter is an EMPTY STRING, because the initial value of the title input is EMPTY.\nvar _useState3=Object(react[\"useState\"])(\"\"),_useState4=Object(slicedToArray[\"a\" /* default */])(_useState3,2),amountEntered=_useState4[0],setAmountEntered=_useState4[1];var _useState5=Object(react[\"useState\"])(\"\"),_useState6=Object(slicedToArray[\"a\" /* default */])(_useState5,2),dateEntered=_useState6[0],setDateEntered=_useState6[1];// [DONT USE]\n/* Another way of writing multiple STATES: \r\n       Instead of having multiple states in one component, we can have ONLY ONE state that contains a javascript OBJECT with all of the initial values\r\n       of the things we want to store. \r\n       ie: const [userInput, setUserInput] = useState({\r\n              enteredTitle: \" \",\r\n              enteredAmount: \" \",\r\n              enteredDate: \" \",\r\n           });  \r\n           \r\n           */var titleChangeHandler=function titleChangeHandler(event){// The parameter within the Callback function (event) refers to what triggered the event\nsetTitleEntered(event.target.value);/* Stores the KEY press/button that caused the event, into the \"titleEntered\" variable --> using the \r\n                                                \"setTitleEntered\" function */ //console.log(titleEntered); // this is just to make sure that the values are INDEED getting stored in the \"titleEntered\" variable.\n// [Another way (DONT USE)]\n// ************************************************** MEMORISE ************************************************\n// **************** Whenever our State update depends on a PREVIOUS State, use this function form. ***************\n/* setUserInput( (prevState) => { // \"prevState\" refers to the LATEST state snapshot of the \"useState\" funtion's object, keeping all state updates in mind. \r\n            return (\r\n                ...prevState,    // We can use the spread operator to pull all the key-value pairs from the javascript OBJECT, in the prevState function (which its values come from the useState function's object), and adds it to the new object (\"setUserInput\")\r\n                enteredTitle: event.target.value,  // and then override the value we want to change\r\n            );\r\n        }); */};var amountChangeHandler=function amountChangeHandler(event){setAmountEntered(event.target.value);// [Another way (DONT USE)]\n/* setUserInput( (prevState) => {\r\n            return (\r\n                ...prevState,    \r\n                enteredAmount: event.target.value,\r\n           }); */};var dateChangeHandler=function dateChangeHandler(event){setDateEntered(event.target.value);// [Another way (DONT USE)]\n/* setUserInput( (prevState) => {\r\n            return (\r\n                ...prevState,    \r\n                enteredDate: event.target.value,\r\n           }); */};/* This function collects and combines the data we stored into the \"status\" functions (ie: \"titleEntered\"), into a javascript object. \r\n     So that we can later do something with it. */var formHandler=function formHandler(event){// \"event\" refers to what triggered the event (ie: when we click the submit button)\n/* Whenever we click the SUBMIT button (inside the form element), the web browser refreshes the web page by default, which is NOT WHAT WE WANT. \r\n           We want to handle the form submission through javascript, inorder to manually collect and combine the data into an object and do something with it.\r\n           So we use the \"preventDefault()\" which is a default javascript method. So it prevents refreshing the page when the submit button is clicked, because \r\n           it doesn't actually submit the data or do anything. */event.preventDefault();// This object combines all the entered data.\nvar expenseData={title:titleEntered,// \"titleEntered\" refers to the variable in the destructing array, in which we store the data entered in the title input element.\namount:+amountEntered,date:new Date(dateEntered)// parses the date string (\"dateEntered\") and converts it into a date object.\n};props.onSaveExpenseData(expenseData);/* passes \"expenseData\" javascript object properties to the \"onSaveExpenseData()\" function's parameter, \r\n                                            located in this component's parent (\"NewExpense.js\"). HAVE TO USE THE NAME (KEY) OF THE ATTRIBUTE IN THE PARENT */setTitleEntered(\"\");/* overrides what user entered, after the form was submitted --> and therefor clear the input to an empty string.\r\n                            [have to add the \"value\" attribute with the \"titleEntered\" variable, to the corresponding input element] */setAmountEntered(\"\");setDateEntered(\"\");};return/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"form\",{onSubmit:formHandler,children:[/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"div\",{className:\"expense-form\",children:[/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"div\",{className:\"expense-form__control\",children:[/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"label\",{children:\"Title\"}),/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"input\",{type:\"text\"/* This is TWO-WAY BINDING **** (allows us to gather user input (through \"onChange\" event) but then also change it (through \"value\" attribute)\r\n               (for example: upon form submission)) */,value:titleEntered// a prop that passes a new value into the input, so that we can reset or change the input programmtaically \n// (This will let us reset the input value that the user typed in, when we click the SUBMIT button). \n// [we need to also set the string of the \"setTitleEntered\" to an empty string (\"\") in the formHandler function ***.]\n,onChange:titleChangeHandler// listens to changes in the input to update the state\n})]}),/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"div\",{className:\"expense-form__control\",children:[/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"label\",{children:\"Amount\"}),/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"input\",{type:\"number\",min:\"0.01\",step:\"0.01\",value:amountEntered,onChange:amountChangeHandler})]}),/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"div\",{className:\"expense-form__control\",children:[/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"label\",{children:\"Date\"}),/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"input\",{type:\"date\",min:\"2019-01-01\",max:\"2022-12-31\",value:dateEntered,onChange:dateChangeHandler})]})]}),/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"div\",{className:\"expense-form__actions\",children:[/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"button\",{type:\"button\",onClick:props.onCancel,children:\"Cancel\"}),/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"button\",{type:\"submit\",children:\"Add Expense\"})]})]});};/* harmony default export */ var components_NewExpense_ExpenseForm = (ExpenseForm_ExpenseForm);\n// EXTERNAL MODULE: ./src/components/NewExpense/NewExpense.css\nvar NewExpense_NewExpense = __webpack_require__(25);\n\n// CONCATENATED MODULE: ./src/components/NewExpense/NewExpense.js\n// dont need this tho    \n// This component will return an HTML form for USER inputs, where they can add their expenses.\nvar NewExpense_NewExpense_NewExpense=function NewExpense(props){// \"props\" lets us access attribute values (which have functions), from parent components or other compoenents.\nvar saveExpenseDataHandler=function saveExpenseDataHandler(enteredExpenseData){// We get the expense data properties through this parameter. Check \"ExpenseForm.js\" for explanation.\nvar expenseData=Object(objectSpread2[\"a\" /* default */])(Object(objectSpread2[\"a\" /* default */])({},enteredExpenseData),{},{id:Math.random().toString()});props.onAddExpense(expenseData);/* passes \"expenseData\" javascript object properties to the \"onAddExpense()\" function's parameter, \r\n                                            located in this component's parent (\"App.js\"). HAVE TO USE THE NAME (KEY) OF THE ATTRIBUTE IN THE PARENT */setIsEditing(false);};// This opens up the user input form tab, when the add new expense button is clicked.\nvar _useState=Object(react[\"useState\"])(false),_useState2=Object(slicedToArray[\"a\" /* default */])(_useState,2),isEditing=_useState2[0],setIsEditing=_useState2[1];var isEditingHandler=function isEditingHandler(){setIsEditing(true);};var onCancelHandler=function onCancelHandler(){setIsEditing(false);};return/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"div\",{className:\"new-expense\",children:[!isEditing&&/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(\"button\",{onClick:isEditingHandler,children:\"Add New Expense\"}),isEditing&&/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(components_NewExpense_ExpenseForm,{onSaveExpenseData:saveExpenseDataHandler,onCancel:onCancelHandler})]});};/* harmony default export */ var components_NewExpense_NewExpense = (NewExpense_NewExpense_NewExpense);\n// CONCATENATED MODULE: ./src/App.js\n// **************** What is the \"App.js\" file used for? ****************\n// The \"App.js\" is a SPECIAL kind of component. It is our ROOT component which means\n// its the main component being rendered in our starting file (the \"index.js\" file).\n// All other components that we create will be nested inside this file.\n// ***********************************************************************************************************************************\n// **************** Importing other files here ****************\n// We import files at the top.\n// import {name of the function} from {its location in our project}\n// After importing, now we can use the custom component (\"ExpenseItem\") like a\n// regular HTML element, just like we use any HTML element (ie: <h2></h2>).\n// ***********************************************************************************************************************************\n// **************** Difference between HTML built-in Elements, and React custom Elements/Components  ****************\n/* VERY IMPORTANT: The key difference between built-in HTML elements and our custom elements/components, is that \nour custom elements MUST start with an UPPERCASE character or else react wouldn't be able \nto detect that it is a custom component */ /* SO THING TO REMEMBER: Is that built-in HTML elements starts with a LOWERCASE.\n                          And our custom components/elements starts with an UPPERCASE. \n                                      inorder for them to be detected by React */ /* Must use the exact name that we used in the import */ // ***********************************************************************************************************************************\n// ************************** HOW TO HAVE REUSABLE FUNCTIONS that we can call and change multiple times? ********************************\n// FIRST PART\n// *** A concept called \"Props\" (stands for properties) in React, enables us to make the components reusable by using parameters.\n/* We make a function (in a component) resuable by adding a paramter to it (\"props\") --> which lets us call the same function, but \n   with different parameter input values and thus the function produces different output values and become reusable. */ /* The paramter values, which will be placed inside the component function to output different results, ARE STORED HERE in \"App.js\" file, \n   ussually as an ARRAY that have multiple javascript OBJECTS to store different values. */ // Component elements (ie: \"<ExpenseItem>\") can have attributes just like in HTML elements (ie: \"<ExpenseItem title={expenses[0].title}> ).\n/* these attributes are \"Key-Value\" pairs --> \"key\" is the attribute name (ie: \"title\") and values will be their values that we set\n       (ie: \"{expenses[0].title}\" ) */ /* These attributes names can be ANYTHING WE WANT.\n     The component attributes values come from an ARRAY that contains multiple \n     Javascript OBJECTS that we created here in \"App.js\".*/ // **********\n/* SUMMARY: 1. Create a new component.\n              2. Create a function with a parameter (props) in that component, with a return function that has JSX code in it.\n              3. Import that component here and then add it to the \"App\" function, as custom React elements.\n              3. Then create a javascript object, inside the \"App\" function, that will have an Array of properties.\n              4. Then use these properties as attributes in the custom React elements.\n              5. Lastly go back to the component we created and reference those attributes in the jsx code, using the \"props\" parameter.*/ // ***********************************************************************************************************************************\nvar DUMMY_INITIAL_EXPENSES=[{id:\"e1\",title:\"Car Insurance\",date:new Date(2021,12,28),amount:300.18},{id:\"e2\",title:\"Toilet Paper\",date:new Date(2021,11,20),amount:265.35},{id:\"e3\",title:\"New TV\",date:new Date(2021,8,20),amount:465.25},{id:\"e4\",title:\"New Bed\",date:new Date(2021,1,20),amount:600.87}];// ARROW FUNCTION (alternative syntax for wrinting a function)\nvar App_App=function App(){// THIS IS HOW WE ADD A NEW EXPENSE ITEM USING STATE.\nvar _useState=Object(react[\"useState\"])(DUMMY_INITIAL_EXPENSES),_useState2=Object(slicedToArray[\"a\" /* default */])(_useState,2),addedExpense=_useState2[0],setAddedExpense=_useState2[1];var addExpenseHandler=function addExpenseHandler(expense){console.log(\"Getting Form Expense Data from App.js\");// This way of updating the state is not REEAAAALLY correct. It would still work tho.\n/* setAddedExpense([expense, ...addedExpense]);   ** since the data passed from the \"onAddExpense\" attribute is an Array, we have to use an array here.\n                                                         We also use the spread operator to pull all the previous object's arrays that we already added from \n                                                         to the \"addedExpense\" */ // The CLEAN way of updating our state when its based on older snapshots of that same state\n// If we're updating the state, depending on the previour state, WE SHOULD USE THIS SPECIAL FUNCTION FORM:\n// So that we pass a FUNCTION as an argument/parameter, and then that FUNCTION will automatically receive the latest state snapshot/properties\nsetAddedExpense(function(prevExpenses){return[expense].concat(Object(toConsumableArray[\"a\" /* default */])(prevExpenses));});};// An array that takes in multiple javascript objects\n/*  The data in the different objects (properties) in the array, will be passed onto the React custom component/element (ie: \"<ExpenseItem>\"),\n       as attributes, which will then be passed onto the JSX code in the \"ExpenseItem.js\" file */return/*#__PURE__*/Object(jsx_runtime[\"jsxs\"])(\"div\",{children:[/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(components_NewExpense_NewExpense,{onAddExpense:addExpenseHandler}),/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(components_Expenses_Expenses,{items:addedExpense})]});};/* harmony default export */ var src_App = (App_App);\n// CONCATENATED MODULE: ./src/index.js\n// In React, this is the FIRST file that will be executed when running in the browser, \n// unlike in Native Javascript where the \"index.html\" file is the first to be executed and then the rest.\n// for css files we keep the \".css\" \n// we ommit the \".js\" when importing javascript files\n// This references the \"App.js\" component, which has all the other components that we created, nested in.\n// We only render the \"App.js\" (root). Other components will be rendered through the \"App.js\" file which has all the \n// other components nested in.\nreact_dom_default.a.render(/*#__PURE__*/Object(jsx_runtime[\"jsx\"])(src_App,{}),document.getElementById('root'));\n\n/***/ })\n],[[26,1,2]]]);","inputSourceMap":{"version":3,"sources":["C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\mini-css-extract-plugin\\dist\\loader.js??ref--5-oneOf-4-0!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\css-loader\\dist\\cjs.js??ref--5-oneOf-4-1!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\postcss-loader\\src\\index.js??postcss!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\src\\index.css","C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\mini-css-extract-plugin\\dist\\loader.js??ref--5-oneOf-4-0!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\css-loader\\dist\\cjs.js??ref--5-oneOf-4-1!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\postcss-loader\\src\\index.js??postcss!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\src\\components\\Expenses\\ExpenseDate.css","C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\mini-css-extract-plugin\\dist\\loader.js??ref--5-oneOf-4-0!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\css-loader\\dist\\cjs.js??ref--5-oneOf-4-1!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\postcss-loader\\src\\index.js??postcss!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\src\\components\\UI\\Card.css","C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\mini-css-extract-plugin\\dist\\loader.js??ref--5-oneOf-4-0!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\css-loader\\dist\\cjs.js??ref--5-oneOf-4-1!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\postcss-loader\\src\\index.js??postcss!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\src\\components\\Expenses\\ExpenseItem.css","C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\mini-css-extract-plugin\\dist\\loader.js??ref--5-oneOf-4-0!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\css-loader\\dist\\cjs.js??ref--5-oneOf-4-1!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\postcss-loader\\src\\index.js??postcss!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\src\\components\\Expenses\\ExpensesList.css","C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\mini-css-extract-plugin\\dist\\loader.js??ref--5-oneOf-4-0!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\css-loader\\dist\\cjs.js??ref--5-oneOf-4-1!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\postcss-loader\\src\\index.js??postcss!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\src\\components\\Expenses\\ExpensesFilter.css","C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\mini-css-extract-plugin\\dist\\loader.js??ref--5-oneOf-4-0!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\css-loader\\dist\\cjs.js??ref--5-oneOf-4-1!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\postcss-loader\\src\\index.js??postcss!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\src\\components\\Chart\\ChartBar.css","C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\mini-css-extract-plugin\\dist\\loader.js??ref--5-oneOf-4-0!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\css-loader\\dist\\cjs.js??ref--5-oneOf-4-1!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\postcss-loader\\src\\index.js??postcss!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\src\\components\\Chart\\Chart.css","C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\mini-css-extract-plugin\\dist\\loader.js??ref--5-oneOf-4-0!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\css-loader\\dist\\cjs.js??ref--5-oneOf-4-1!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\postcss-loader\\src\\index.js??postcss!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\src\\components\\Expenses\\Expenses.css","C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\mini-css-extract-plugin\\dist\\loader.js??ref--5-oneOf-4-0!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\css-loader\\dist\\cjs.js??ref--5-oneOf-4-1!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\postcss-loader\\src\\index.js??postcss!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\src\\components\\NewExpense\\ExpenseForm.css","C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\mini-css-extract-plugin\\dist\\loader.js??ref--5-oneOf-4-0!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\css-loader\\dist\\cjs.js??ref--5-oneOf-4-1!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\node_modules\\postcss-loader\\src\\index.js??postcss!C:\\Users\\burni\\Desktop\\React - Web Dev\\01-starting-setup\\src\\components\\NewExpense\\NewExpense.css","C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/Expenses/ExpenseDate.js","C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/UI/Card.js","C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/Expenses/ExpenseItem.js","C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/Expenses/ExpensesList.js","C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/Expenses/ExpensesFilter.js","C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/Chart/ChartBar.js","C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/Chart/Chart.js","C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/Expenses/ExpensesChart.js","C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/Expenses/Expenses.js","C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/NewExpense/ExpenseForm.js","C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/NewExpense/NewExpense.js","C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/App.js","C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/index.js"],"names":["ExpenseDate","props","month","date","toLocaleString","day","year","getFullYear","Card","classes","className","children","ExpenseItem","title","amount","ExpensesList","passedFilteredExpenses","length","map","expense","id","ExpensesFilter","dropdownChangeHandler","event","onChangeFilter","target","value","selected","ChartBar","barFillHeight","maxValue","Math","round","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","max","ExpensesChart","chartDataPoints","expenses","expenseMonth","getMonth","Expenses","useState","filteredYear","setFilteredYear","filterChangeHandler","selectedYear","console","log","filteredExpenses","items","filter","filterByYear","toString","ExpenseForm","titleEntered","setTitleEntered","amountEntered","setAmountEntered","dateEntered","setDateEntered","titleChangeHandler","amountChangeHandler","dateChangeHandler","formHandler","preventDefault","expenseData","Date","onSaveExpenseData","onCancel","NewExpense","saveExpenseDataHandler","enteredExpenseData","random","onAddExpense","setIsEditing","isEditing","isEditingHandler","onCancelHandler","DUMMY_INITIAL_EXPENSES","App","addedExpense","setAddedExpense","addExpenseHandler","prevExpenses","ReactDOM","render","document","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,uC;;;;;;ACAA,uC;;;;;;;ACAA,uC;;;;;;ACAA,uC;;;;;;ACAA,uC;;;;;;ACAA,uC;;;;;;ACAA,uC;;;;;;ACAA,uC;;;;;;ACAA,uC;;;;;;ACAA,uC;;;;;;ACAA,uC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEA;AACA,GAAMA,wBAAW,CAAG,QAAdA,YAAc,CAACC,KAAD,CAAW,CAC7B,GAAMC,MAAK,CAAGD,KAAK,CAACE,IAAN,CAAWC,cAAX,CAA0B,OAA1B,CAAmC,CAAEF,KAAK,CAAE,MAAT,CAAnC,CAAd,CACA,GAAMG,IAAG,CAAGJ,KAAK,CAACE,IAAN,CAAWC,cAAX,CAA0B,OAA1B,CAAmC,CAAEC,GAAG,CAAE,SAAP,CAAnC,CAAZ,CACA,GAAMC,KAAI,CAAGL,KAAK,CAACE,IAAN,CAAWI,WAAX,EAAb,CAEA,mBACE,mCAAK,SAAS,CAAC,cAAf,wBACE,kCAAK,SAAS,CAAC,qBAAf,UAAsCL,KAAtC,EADF,cAEE,kCAAK,SAAS,CAAC,oBAAf,UAAqCI,IAArC,EAFF,cAGE,kCAAK,SAAS,CAAC,mBAAf,UAAoCD,GAApC,EAHF,GADF,CAOD,CAZD,CAceL,2FAAf,E;;;;;ACfA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA,GAAMQ,UAAI,CAAG,QAAPA,KAAO,CAACP,KAAD,CAAW,CACpB,GAAMQ,QAAO,CAAG,QAAUR,KAAK,CAACS,SAAhC,CAA4C;AAChD;AACA,iHAGI,mBACI,mCAAK,SAAS,CAAED,OAAhB,WACKR,KAAK,CAACU,QADX,UADJ,CAMH,CAZD,CAceH,gEAAf,E;;;;;AC/B2B;AACE;AACD;AACA;AAC5B;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oE,CAEA;AACA;AACA;AAEA;AAGA;AACA;AACI;AACA;AACA;AACA;AACA;AACE;AAEN;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC,CAEA;AAGC;AACC;AACA;AACA;AACA;AACA;AAGF;AACA,GAAMI,wBAAW,CAAG,QAAdA,YAAc,CAACX,KAAD,CAAW,CAC7B;AAEA;AACA;AACA;AAEA,mBACE,uDAGE,4BAAC,kBAAD,EAAM,SAAS,CAAC,cAAhB,4BAEE,mCAAK,SAAS,CAAC,2BAAf,wBAGE,2BAAC,+BAAD,EAAa,IAAI,CAAEA,KAAK,CAACE,IAAzB,EAHF,kBAME,0CAAKF,KAAK,CAACY,KAAX,EANF,OAFF,cAYE,mCAAK,SAAS,CAAC,qBAAf,eAAuCZ,KAAK,CAACa,MAA7C,GAZF,GAHF,EADF,CAyBD,CAhCD,CAmCA;AACeF,2FAAf,EAEA;AAEA;AACA;AACA;AACA;AACA;AACA,+D;;;;;ACpJA,GAAMG,0BAAY,CAAG,QAAfA,aAAe,CAACd,KAAD,CAAW,CAG5B;AACF,GAAIA,KAAK,CAACe,sBAAN,CAA6BC,MAA7B,GAAwC,CAA5C,CAA+C,CAE7C,mBAAS,iCAAI,SAAS,CAAC,yBAAd,+BAAT,CAED,CAED;AACA;AACF;AACA;AACA;AACA;AACA,+JAGI,mBACI,iCAAI,SAAS,CAAC,eAAd,UACKhB,KAAK,CAACe,sBAAN,CAA6BE,GAA7B,CAAiC,SAACC,OAAD,qBAClC,2BAAC,+BAAD,EACuB;AACnB,KAAK,CAAEA,OAAO,CAACN,KAFnB,CAGI,IAAI,CAAEM,OAAO,CAAChB,IAHlB,CAII,MAAM,CAAEgB,OAAO,CAACL,MAJpB,EACSK,OAAO,CAACC,EADjB,CADkC,EAAjC,CADL,EADJ,CAYH,CA/BD,CAkCeL,8FAAf,E;;;;;ACnCA,GAAMM,8BAAc,CAAG,QAAjBA,eAAiB,CAACpB,KAAD,CAAW,CAE9B,GAAMqB,sBAAqB,CAAG,QAAxBA,sBAAwB,CAACC,KAAD,CAAW,CACrCtB,KAAK,CAACuB,cAAN,CAAqBD,KAAK,CAACE,MAAN,CAAaC,KAAlC,EACH,CAFD,CAIF,mBACE,kCAAK,SAAS,CAAC,iBAAf,uBAEE,mCAAK,SAAS,CAAC,0BAAf,wBAEE,+DAFF,cAGE,sCAAQ,KAAK,CAAEzB,KAAK,CAAC0B,QAArB,CAA+B,QAAQ,CAAEL,qBAAzC,wBACE,qCAAQ,KAAK,CAAC,MAAd,kBADF,cAEE,qCAAQ,KAAK,CAAC,MAAd,kBAFF,cAGE,qCAAQ,KAAK,CAAC,MAAd,kBAHF,cAIE,qCAAQ,KAAK,CAAC,MAAd,kBAJF,GAHF,GAFF,EADF,CAiBD,CAvBD,CAyBeD,oGAAf,E;;;;;;;;ACzBA,GAAMO,kBAAQ,CAAG,QAAXA,SAAW,CAAC3B,KAAD,CAAW,CAC1B,GAAI4B,cAAa,CAAG,IAApB,CAEA,GAAI5B,KAAK,CAAC6B,QAAN,CAAiB,CAArB,CAAwB,CACtBD,aAAa,CAAGE,IAAI,CAACC,KAAL,CAAY/B,KAAK,CAACyB,KAAN,CAAczB,KAAK,CAAC6B,QAArB,CAAiC,GAA5C,EAAmD,GAAnE,CACD,CAED,mBACE,mCAAK,SAAS,CAAC,WAAf,wBACE,kCAAK,SAAS,CAAC,kBAAf,uBACE,kCACE,SAAS,CAAC,iBADZ,CAEE,KAAK,CAAE,CAAEG,MAAM,CAAEJ,aAAV,CAFT,EADF,EADF,cAOE,kCAAK,SAAS,CAAC,kBAAf,UAAmC5B,KAAK,CAACiC,KAAzC,EAPF,GADF,CAWD,CAlBD,CAoBeN,+EAAf,E;;;;;ACnBA,GAAMO,kBAAK,CAAG,QAARA,MAAQ,CAAClC,KAAD,CAAW,CACvB,GAAMmC,gBAAe,CAAGnC,KAAK,CAACoC,UAAN,CAAiBnB,GAAjB,CAAqB,SAAAoB,SAAS,QAAIA,UAAS,CAACZ,KAAd,EAA9B,CAAxB,CACA,GAAMa,aAAY,CAAGR,IAAI,CAACS,GAAL,OAAAT,IAAI,8CAAQK,eAAR,EAAzB,CAEA,mBACE,kCAAK,SAAS,CAAC,OAAf,UACGnC,KAAK,CAACoC,UAAN,CAAiBnB,GAAjB,CAAqB,SAACoB,SAAD,qBACpB,2BAAC,yBAAD,EAEE,KAAK,CAAEA,SAAS,CAACZ,KAFnB,CAGE,QAAQ,CAAEa,YAHZ,CAIE,KAAK,CAAED,SAAS,CAACJ,KAJnB,EACOI,SAAS,CAACJ,KADjB,CADoB,EAArB,CADH,EADF,CAYD,CAhBD,CAkBeC,4EAAf,E;;ACnBA,GAAMM,4BAAa,CAAG,QAAhBA,cAAgB,CAACxC,KAAD,CAAW,CAC/B,GAAMyC,gBAAe,CAAG,CACtB,CAAER,KAAK,CAAE,KAAT,CAAgBR,KAAK,CAAE,CAAvB,CADsB,CAEtB,CAAEQ,KAAK,CAAE,KAAT,CAAgBR,KAAK,CAAE,CAAvB,CAFsB,CAGtB,CAAEQ,KAAK,CAAE,KAAT,CAAgBR,KAAK,CAAE,CAAvB,CAHsB,CAItB,CAAEQ,KAAK,CAAE,KAAT,CAAgBR,KAAK,CAAE,CAAvB,CAJsB,CAKtB,CAAEQ,KAAK,CAAE,KAAT,CAAgBR,KAAK,CAAE,CAAvB,CALsB,CAMtB,CAAEQ,KAAK,CAAE,KAAT,CAAgBR,KAAK,CAAE,CAAvB,CANsB,CAOtB,CAAEQ,KAAK,CAAE,KAAT,CAAgBR,KAAK,CAAE,CAAvB,CAPsB,CAQtB,CAAEQ,KAAK,CAAE,KAAT,CAAgBR,KAAK,CAAE,CAAvB,CARsB,CAStB,CAAEQ,KAAK,CAAE,KAAT,CAAgBR,KAAK,CAAE,CAAvB,CATsB,CAUtB,CAAEQ,KAAK,CAAE,KAAT,CAAgBR,KAAK,CAAE,CAAvB,CAVsB,CAWtB,CAAEQ,KAAK,CAAE,KAAT,CAAgBR,KAAK,CAAE,CAAvB,CAXsB,CAYtB,CAAEQ,KAAK,CAAE,KAAT,CAAgBR,KAAK,CAAE,CAAvB,CAZsB,CAAxB,CAD+B,mEAgBTzB,KAAK,CAAC0C,QAhBG,YAgB/B,+CAAsC,IAA3BxB,QAA2B,aACpC,GAAMyB,aAAY,CAAGzB,OAAO,CAAChB,IAAR,CAAa0C,QAAb,EAArB,CAA8C;AAC9CH,eAAe,CAACE,YAAD,CAAf,CAA8BlB,KAA9B,EAAuCP,OAAO,CAACL,MAA/C,CACD,CAnB8B,qDAqB/B,mBAAQ,2BAAC,sBAAD,EAAO,UAAU,CAAE4B,eAAnB,EAAR,CACD,CAtBD,CAwBeD,sFAAf,E;;;;;ACrBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oB,CAEA;AACA;AACA;AAEA,GAAMK,2BAAQ,CAAG,QAAXA,SAAW,CAAC7C,KAAD,CAAW,CAE1B,cAAwC8C,yBAAQ,CAAC,MAAD,CAAhD,kEAAOC,YAAP,eAAqBC,eAArB,eAEA,GAAMC,oBAAmB,CAAG,QAAtBA,oBAAsB,CAACC,YAAD,CAAkB,CAC5CF,eAAe,CAACE,YAAD,CAAf,CACAC,OAAO,CAACC,GAAR,CAAYF,YAAZ,EACD,CAHD,CAKA;AACA;AACA,GAAMG,iBAAgB,CAAGrD,KAAK,CAACsD,KAAN,CAAYC,MAAZ,CAAmB,SAAAC,YAAY,QAAIA,aAAY,CAACtD,IAAb,CAAkBI,WAAlB,GAAgCmD,QAAhC,KAA+CV,YAAnD,EAA/B,CAAzB,CACAI,OAAO,CAACC,GAAR,CAAYC,gBAAZ,EAGA,oBACE,0EAEA,4BAAC,kBAAD,EAAM,SAAS,CAAC,UAAhB,wBAEE,2BAAC,kCAAD,EAAgB,cAAc,CAAEJ,mBAAhC,CAAqD,QAAQ,CAAEF,YAA/D,EAFF,kBAIE,2BAAC,sBAAD,EAAe,QAAQ,CAAEM,gBAAzB,EAJF,cAKE,2BAAC,gCAAD,EAAc,sBAAsB,CAAEA,gBAAtC,EALF,OAHF,EAYD,CA3BD,CA6BeR,2FAAf,E;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,8I,CACE,oK,CACA;AACF,mJ,CACE;AACF;AACA;AACA,wJ,CAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0F,CACC;AAMD;AACA,GAAMa,wBAAW,CAAG,QAAdA,YAAc,CAAC1D,KAAD,CAAW,CAC7B;AACF;AACA,kJAH+B,CAK7B;AAEA,cAAwC8C,yBAAQ,CAAC,EAAD,CAAhD,kEAAOa,YAAP,eAAqBC,eAArB,eAAsD;AACxD;AACA,yJAT+B,CAU7B;AAEA,eAA0Cd,yBAAQ,CAAC,EAAD,CAAlD,mEAAOe,aAAP,eAAsBC,gBAAtB,eACA,eAAsChB,yBAAQ,CAAC,EAAD,CAA9C,mEAAOiB,WAAP,eAAoBC,cAApB,eAEA;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAEE,GAAMC,mBAAkB,CAAG,QAArBA,mBAAqB,CAAC3C,KAAD,CAAW,CAAE;AAEtCsC,eAAe,CAACtC,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAf,CAAqC;AACzC,6EAHwC,CAIpC;AAEA;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;AACA,cACG,CAfD,CAiBA,GAAMyC,oBAAmB,CAAG,QAAtBA,oBAAsB,CAAC5C,KAAD,CAAW,CAErCwC,gBAAgB,CAACxC,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAhB,CAEA;AACA;AACJ;AACA;AACA;AACA,iBACG,CAVD,CAYA,GAAM0C,kBAAiB,CAAG,QAApBA,kBAAoB,CAAC7C,KAAD,CAAW,CACnC0C,cAAc,CAAC1C,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAd,CAEA;AACA;AACJ;AACA;AACA;AACA,iBACG,CATD,CAWA;AACF,kDACE,GAAM2C,YAAW,CAAG,QAAdA,YAAc,CAAC9C,KAAD,CAAW,CAC7B;AACA;AACJ;AACA;AACA,iEACIA,KAAK,CAAC+C,cAAN,GAEA;AACA,GAAMC,YAAW,CAAG,CAClB1D,KAAK,CAAE+C,YADW,CACG;AACrB9C,MAAM,CAAE,CAACgD,aAFS,CAGlB3D,IAAI,CAAE,GAAIqE,KAAJ,CAASR,WAAT,CAAuB;AAHX,CAApB,CAOA/D,KAAK,CAACwE,iBAAN,CAAwBF,WAAxB,EAAsC;AAC1C,8JACIV,eAAe,CAAC,EAAD,CAAf,CAAqB;AACzB,uIACIE,gBAAgB,CAAC,EAAD,CAAhB,CACAE,cAAc,CAAC,EAAD,CAAd,CACD,CAtBD,CA0BA,mBACE,oCAAM,QAAQ,CAAEI,WAAhB,wBAGE,mCAAK,SAAS,CAAC,cAAf,wBACE,mCAAK,SAAS,CAAC,uBAAf,wBACE,sDADF,cAEE,oCACE,IAAI,CAAC,MACL;AACZ,sDAHU,CAIE,KAAK,CAAET,YAAc;AACA;AACA;AANvB,CAOE,QAAQ,CAAEM,kBAAoB;AAPhC,EAFF,GADF,cAcE,mCAAK,SAAS,CAAC,uBAAf,wBACE,uDADF,cAEE,oCACE,IAAI,CAAC,QADP,CAEE,GAAG,CAAC,MAFN,CAGE,IAAI,CAAC,MAHP,CAIE,KAAK,CAAEJ,aAJT,CAKE,QAAQ,CAAEK,mBALZ,EAFF,GAdF,cAyBE,mCAAK,SAAS,CAAC,uBAAf,wBACE,qDADF,cAEE,oCACE,IAAI,CAAC,MADP,CAEE,GAAG,CAAC,YAFN,CAGE,GAAG,CAAC,YAHN,CAIE,KAAK,CAAEH,WAJT,CAKE,QAAQ,CAAEI,iBALZ,EAFF,GAzBF,GAHF,cAuCE,mCAAK,SAAS,CAAC,uBAAf,wBACE,qCAAQ,IAAI,CAAC,QAAb,CAAsB,OAAO,CAAEnE,KAAK,CAACyE,QAArC,oBADF,cAEE,qCAAQ,IAAI,CAAC,QAAb,yBAFF,GAvCF,GADF,CA8CD,CA7ID,CA+Ief,6FAAf,E;;;;;AClNyC;AAKzC;AACA,GAAMgB,iCAAU,CAAG,QAAbA,WAAa,CAAC1E,KAAD,CAAW,CAAE;AAC5B,GAAM2E,uBAAsB,CAAG,QAAzBA,uBAAyB,CAACC,kBAAD,CAAwB,CAAE;AACrD,GAAMN,YAAW,sFACVM,kBADU,MAEbzD,EAAE,CAAEW,IAAI,CAAC+C,MAAL,GAAcpB,QAAd,EAFS,EAAjB,CAIAzD,KAAK,CAAC8E,YAAN,CAAmBR,WAAnB,EAAiC;AACzC,uJACQS,YAAY,CAAC,KAAD,CAAZ,CACH,CARD,CAWA;AACA,cAAkCjC,yBAAQ,CAAC,KAAD,CAA1C,kEAAOkC,SAAP,eAAkBD,YAAlB,eAEA,GAAME,iBAAgB,CAAG,QAAnBA,iBAAmB,EAAM,CAC3BF,YAAY,CAAC,IAAD,CAAZ,CACH,CAFD,CAIA,GAAMG,gBAAe,CAAG,QAAlBA,gBAAkB,EAAM,CAC1BH,YAAY,CAAC,KAAD,CAAZ,CACH,CAFD,CAKA,mBACI,mCAAK,SAAS,CAAC,aAAf,WACK,CAACC,SAAD,eAAc,qCAAQ,OAAO,CAAEC,gBAAjB,6BADnB,CAEKD,SAAS,eAAI,2BAAC,iCAAD,EAAa,iBAAiB,CAAEL,sBAAhC,CAAwD,QAAQ,CAAEO,eAAlE,EAFlB,GADJ,CAMH,CA9BD,CAgCeR,qGAAf,E;;ACtCA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA,0C,CACA;AACA;AACA,iF,CACA,wD,CACA;AAGA;AACkC;AAClC;AACA;AACA,uH,CACA;AACA,2F,CACA;AACA;AACA,sC,CACA;AACA;AACA,2D,CACA;AACE;AACF;AACA;AACA;AACA;AACA,0I,CACA;AAGA,GAAMS,uBAAsB,CAAG,CAC7B,CACEhE,EAAE,CAAE,IADN,CAEEP,KAAK,CAAE,eAFT,CAGEV,IAAI,CAAE,GAAIqE,KAAJ,CAAS,IAAT,CAAe,EAAf,CAAmB,EAAnB,CAHR,CAIE1D,MAAM,CAAE,MAJV,CAD6B,CAQ7B,CACEM,EAAE,CAAE,IADN,CAEEP,KAAK,CAAE,cAFT,CAGEV,IAAI,CAAE,GAAIqE,KAAJ,CAAS,IAAT,CAAe,EAAf,CAAmB,EAAnB,CAHR,CAIE1D,MAAM,CAAE,MAJV,CAR6B,CAe7B,CACEM,EAAE,CAAE,IADN,CAEEP,KAAK,CAAE,QAFT,CAGEV,IAAI,CAAE,GAAIqE,KAAJ,CAAS,IAAT,CAAe,CAAf,CAAkB,EAAlB,CAHR,CAIE1D,MAAM,CAAE,MAJV,CAf6B,CAsB7B,CACEM,EAAE,CAAE,IADN,CAEEP,KAAK,CAAE,SAFT,CAGEV,IAAI,CAAE,GAAIqE,KAAJ,CAAS,IAAT,CAAe,CAAf,CAAkB,EAAlB,CAHR,CAIE1D,MAAM,CAAE,MAJV,CAtB6B,CAA/B,CAgCA;AACA,GAAMuE,QAAG,CAAG,QAANA,IAAM,EAAM,CAEhB;AACA,cAAwCtC,yBAAQ,CAACqC,sBAAD,CAAhD,kEAAOE,YAAP,eAAqBC,eAArB,eAEA,GAAMC,kBAAiB,CAAG,QAApBA,kBAAoB,CAACrE,OAAD,CAAa,CACrCiC,OAAO,CAACC,GAAR,CAAY,uCAAZ,EACA;AACA;AACJ;AACA,iFALyC,CAOrC;AACA;AACI;AACJkC,eAAe,CAAC,SAACE,YAAD,CAAkB,CAChC,OAAStE,OAAT,sDAAqBsE,YAArB,GACD,CAFc,CAAf,CAID,CAdD,CAiBA;AACA;AACF,iGAIE,mBACE,0DAEE,2BAAC,gCAAD,EAAY,YAAY,CAAED,iBAA1B,EAFF,cAQE,2BAAC,4BAAD,EAAU,KAAK,CAAEF,YAAjB,EARF,GADF,CAaD,CAzCD,CA2CeD,mDAAf,E;;AChIA;AACA;AAKsB;AACG;AAEzB;AACA;AACA;AACAK,mBAAQ,CAACC,MAAT,cAAgB,2BAAC,OAAD,IAAhB,CAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E","file":"x","sourcesContent":["// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","import \"./ExpenseDate.css\";\r\n\r\n// ARROW FUNCTION \r\nconst ExpenseDate = (props) => {\r\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const year = props.date.getFullYear();\r\n\r\n  return (\r\n    <div className=\"expense-date\">\r\n      <div className=\"expense-date__month\">{month}</div>\r\n      <div className=\"expense-date__year\">{year}</div>\r\n      <div className=\"expense-date__day\">{day}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseDate;\r\n","import \"./Card.css\"\r\n\r\n// Special type of component that acts as a ROOT custom element in other components/files.\r\n\r\n// This component is going to be used as a *** Wrapper or ROOT/MAIN *** custom element in other files/components, that wraps\r\n// all the JSX code inside.\r\n\r\n\r\n// Inorder for this component to be able to act as a ROOT custom element (in other components), it has to have the \"props.children\" react \r\n// feature, which enables it to become a ROOT custom element in other components/files.\r\n// \"props.children\" is a speacial prop that is built into react. Every component recieves the \"props.children\" prop automatically, even if we're\r\n// not setting it explicitly.\r\n// ******* THE VALUE OF THE \"children\" prop ---> is always the content between the opening and closing Wrapper or Root/MAIN tags of the custom component element \r\n// (that we add in other components/files). [ie: <Card>......(\"children\" value)......</Card>]\r\n\r\n\r\n// ARROW FUNCTION \r\nconst Card = (props) => {\r\n    const classes = \"card \" + props.className;  /* Inorder to be able to use classes in a ROOT custom react element --> we need to write\r\n                                                    this code which adds the other classes in those elements (to a long list of class names), next \r\n                                                    to the class that we have here, and thus using them aswell */\r\n                                                        \r\n\r\n    return (\r\n        <div className={classes}> \r\n            {props.children}    {/* DONT FORGET BRACES when adding Javascript expressions in JSX.\r\n                                     We're outputing value of the \"props.children\" prop here*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\"; // In previous versions of React we HAD to add this React import, which transforms JSX code (under the hood) \r\n                             // to HTML code that is readable by the browser. JSX (HTML in Javascript) is NOT READABLE by the browser.\r\n                            // In newer versions of react tho, we dont need this import, but the code is STILL being transformed to HTML \r\n                            // code, under the hood. [This was added to every single file in REACT back in the day.]\r\n// \"React\" is a DEFAULT IMPORT. \", {...}\" is a NAMED IMPORT, which lets us import specific pieces from the react library.\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport Card from \"../UI/Card\";\r\n\r\n// **************** Importing other CSS files here ****************\r\n// When adding css code --> create a file in the components folder with the same name as the component file\r\n// ie: \"ExpenseItem.css\"\r\n// Then we need to import the css file here [AT THE TOP]\r\nimport \"./ExpenseItem.css\";\r\n\r\n// **************** How to name Component files in react ****************\r\n// When naming component files in react, every word in capitalized. Ex: \"ExpenseItem.js\"\r\n// *** It is considered good practice to create new files for different components, so that we have one file per component.\r\n// ***********************************************************************************************************************************\r\n\r\n// **************** What is a Component? ****************\r\n// A COMPONENT IN REACT, IS JUST A JAVASCRIPT FUNCTION that returns JSX code.\r\n// The conventional way of naming a function in a component in react, is to name it the same thing as the file name.\r\n// ***********************************************************************************************************************************\r\n\r\n// ****************************** ONE ROOT element in the return function ******************************\r\n// In React there is an important RULE regarding the JSX code (HTML code in Javascript), that we return inside a component:\r\n// *** Which is that it MUST ONLY have ONE ROOT ELEMENT per RETURN STATEMENT (or JSX code snippet).\r\n// For example: We can't have two divs next to each other, ie: <div>....</div><div>...</div> [NOT ALLOWED BY REACT]\r\n// **** The way around it is to wrap all of the elements inside ONE ROOT/MAIN div -->>\r\n// ***********************************************************************************************************************************\r\n\r\n// ****************************** How to use Javascript in JSX code ******************************\r\n// To output dynamic data (data that can be changed by the user) we use a special syntax by React, INSIDE of the JSX code snippets.\r\n// The special syntax is curly braces\"{}\" where javascript expressions can be insert into.\r\n// ***********************************************************************************************************************************\r\n\r\n// ************************************* HOW TO SHARE DATA BETWEEN REACT COMPONENTS *************************************************\r\n// **************** We make functions in components reusable, by giving it a parameter (\"props\") ****************\r\n// SECOND PART\r\n// In React, Only ONE PARAMTER is needed to hold ALL of the received attributes as properties, hence its name \"Props\"\r\n// All received properties come from the \"App.js\" file, where we create a custom React element that takes in attribites with the properties\r\n// This ONE PARAMATER is ussaully named \"props\" (can be named anything tho). It is a Javascript OBJECT, which is why it can hold all of\r\n// the attribute properties for our custom element that are stated in the \"App.js\" file.\r\n/* FINALLY, after we create the properties and insert them into the custom React elements in the \"App.js\", we THEN add the \"props\" parameter\r\n   to the function here --> then reference to attributes we created in the \"App.js\" by using their \"key\" names, otherwise it wont't work\r\n    (ie: props.{name of the attribute we stated in the \"App.js\"} )*/\r\n\r\n// IN SHORT --> WE GET ALL THE DATA WE NEED FROM OUTSIDE OF THIS COMPONENT (\"App.js\"), AND USE IT HERE BY ACCESSING THIS\r\n//            DATA/PROPERTIES THROUGH A PARAMeTER (\"props\").\r\n// SO the properties are defined in \"App.js\" and then passed here, inorder to have different usages, through attributes.\r\n\r\n// ***********************************************************************************************************************************\r\n\r\n\r\n// ****************************** Adding Events in REACT ******************************\r\n// Ex:   <button onClick={ () => {console.log(\"Button Clickedd!!!\")} }> Click me </button> \r\n    // In react you add an EVENT to the button element (as an attribute), that does something when the button is clicked.\r\n    // All react EVENTS start with \"on....\". ie: \"onclick\"\r\n    // ***Anonymous Arrow function*** ----> () => {....}\r\n    // ********** EVENTS IN React takes in Javascript functions ONLY. (ie: onclick = { () => {.......} } )\r\n    // When witing a javascipt function in an event function --> DO NOT INCLUDE THE BRACKETS TO THE JAVASCRIPT FUNCTION \r\n      // ie: \"<button onclick= { clickHandler }></button>\"  ----> clickHandler doesnt have brackets\r\n\r\n// We can use a wide variety of events, like \"setTimeout()\" for example. Check the HTML events Doc for all the list of events we can use.\r\n// ***********************************************************************************************************************************\r\n\r\n\r\n// ****************************** State in REACT ******************************\r\n// React only renders the component functions ONCE and thats it, which as a result does not let us update something on the web browser\r\n// thats already been rendered, like a text wouldnt change if we click a button.\r\n// This is where STATE comes in, which allows us to define values as state, where changes in these values WILL reflect on component\r\n// functions thats being called again, and make them change on screen/browser.\r\n// \"useState\" is a REACT HOOK. ALL REACT HOOKS start with a \"use...\" word.\r\n// All react HOOKS MUST be called INSIDE of react component functions. Not in nested functions tho.\r\n// \"useState\" ALWAYS returns an ARRAY with exactly TWO elements.\r\n// The \"useState\" HOOK, RE-EXECUTES or CALLS the WHOLE component AGAIN when the state changes, NOT just the variable that we want to change.\r\n\r\n/* Steps: 1. Add \", { useState}\" in the \"import React from \"react\";\", inorder to use this feature in this component.\r\n          2. Then call the \"useState()\" (HOOK) INSIDE the component function. And add an argument/parameter to it.\r\n              That parameter should be a default or INITIAL value of the thing that we want to change on the screen when the event happens. \r\n              ie: \"useState(props.title)\"\r\n          3. To assign a new value to \"props.title\", we then use the ES6 feature called ARRAY DESTRUCTING to assign that new value.\r\n             The Array destructing takes in 2 elements (WE CAN CHOOSE their NAMES to be ANYTHING we want, order is what matters)\r\n              The FIRST element is the name for the DEFAULT value that we want to change**\r\n              The SECOND element is the name of a function that we can later call whenever we want to change the default value \r\n              of \"props.title**\r\n              Like this --> \"const [title, setTitle] = useState(props.title);\"\"  \r\n                            so ------> \"title\" is equal to \"props.title\" and\r\n                                        \"setTitle\" is a function that can later be called to \r\n                                                    set a new value to \"props.title\" to.\r\n            5. To assign the new value --> we call the SECOND element function and then pass the NEW value as an \r\n               argument/parameter inside it. \r\n               ie: \"setTitle( \"NEW TITLEEEEE\" );\" \r\n            6. Lastly, we add the FIRST ELEMENT in the JSX code (in between curly braces), where we want to ouput that new value\r\n               (ie: <h2> {title} </h2>)*/\r\n          \r\n// ***********************************************************************************************************************************\r\n\r\n\r\n // ******** Javascript syntax ********\r\n  // A \"const\" is a variable that may never change.\r\n  // \"Date()\" is a built-in constructor that comes witH JavaScript.\r\n  // \"toISOString()\" returns a Date object as a String, using the ISO standard.\r\n  // \"toLocaleString()\" method returns a string with a language sensitive representation of this date.\r\n  // \"getFullYear()\" method returns the year of the specified date according to local time.\r\n\r\n\r\n// ARROW FUNCTION \r\nconst ExpenseItem = (props) => {\r\n  // const [title, setTitle] = useState(props.title);       // ES6 Array Destructing. Use naming conventions similar to this. [check top for explanation on \"State\"]\r\n\r\n  // const clickHandler = () => {         // Use the word\"Handler\" to make it clear that this will be called upon an Event\r\n  //   setTitle(\"Update Title\");          // \"setTitle\" is the name of second element that comes from the destructing array (which is a function).\r\n  // };\r\n\r\n  return (\r\n    <li>\r\n \r\n      {/* \"Card\" is a special kind of component that can act as a ROOT/Wrapper custom element (check its file) */}\r\n      <Card className=\"expense-item\"> {/* This is the ROOT/MAIN element which wraps all the JSX code inside */}\r\n        \r\n        <div className=\"expense-item__description\">\r\n\r\n          {/* The date properties are coming from the \"App.js\" \"expenses\" javascript object, and getting fed to the \"expenseDate\" */}\r\n          <ExpenseDate date={props.date} /> {/* If we have no content between the opening an closing tags of a react element, we can \r\n                                                write it as a self closing element. */}\r\n\r\n          <h2>{props.title}</h2> {/* \"title\" is the name of the first element that comes from the destructing array. The name \r\n                                of the element we want to change (ie: props.title) */}\r\n        </div>\r\n\r\n        <div className=\"expense-item__price\">${props.amount}</div>\r\n        {/* <button onClick={ clickHandler }> Click me </button>         /* For the \"onclick\" event value --> WE ONLY POINT AT THE \"clickHandler\" \r\n                                                                          function, which means we DON'T ADD ANY PARENTHESES TO IT AT THE END.\r\n                                                                          SAME THING AS IN NATIVE JAVASCRIPT (look at javascript notes) */}\r\n\r\n      </Card>\r\n      \r\n    </li>\r\n  );\r\n}\r\n\r\n\r\n// to use the component, we need to export it or export the function in this file. (**write the name of the function, WITHOUT BRACES)\r\nexport default ExpenseItem;\r\n\r\n// after exporting this file, we can then import it in the \"App.js\" file where all the other components will be imported or nested to.\r\n\r\n// Summary: WE ALWAYS DO THESE STEPS WHEN CREATING A NEW COMPONENT IN REACT ==>\r\n//           1. Create a component file and add a function which return HTML code (just like this one)\r\n//           2. We then \"export\" it (in the same file)\r\n//           3. Then \"import\" it in the file that we want to use it in (\"ussually \"App.js\").\r\n//           4. There we can Use it like an HTML element [but starting with an uppercase character] in the file\r\n//              it is imported in (ussually the \"App.js\" file).\r\n","import React from \"react\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\n\r\nimport \"./ExpensesList.css\"\r\n\r\nconst ExpensesList = (props) => {\r\n\r\n\r\n    // If we have no registered expenses for a specific year ---> display a message \r\n  if (props.passedFilteredExpenses.length === 0) {\r\n\r\n    return ( <h2 className=\"expenses-list__fallback\">No Expenses Found</h2>)\r\n    \r\n  }\r\n\r\n  // This explanation is when we had the above function with \".map\" inside the retrun function (as JSX code). Not any more tho since we moved the logic outside of the return function.\r\n  /* Rendering the \"expenses\" Array (in \"App.js\") Dynamically \r\n            1. Creat curly braces \"{...}* because we will execute a dynamic javascript expression in JSX code, which is why we need the curly braces.\r\n            2. Reference the \"expenses\" array (in \"App.js\") through \"props\" and its attribute name in the \"<expenses />\" custom element. (ie: \"props.items\")\r\n            3. Use the \"map()\" javascript function to create a new array (through its paramter), based on another array (\"expenses\" array in this case,\r\n               which we acces through \"props.items\")\r\n          SO FOR EACH OBJECT IN THE \"expense\" ARRAY, \"map()\" creates a new \"ExpenseItem\" with the properties from the corresponding \"expense\" array object.  */\r\n\r\n\r\n    return (\r\n        <ul className=\"expenses-list\">\r\n            {props.passedFilteredExpenses.map((expense) => (\r\n            <ExpenseItem\r\n                key={expense.id}   // **** always add a KEY when mapping out a list of items, inorder to avoid errors in the console. React needs to uniquely identify every element it adds inorder to be efficient and not go over the whole list of items everytime we add a new item. If we dont add a KEY, react will update ALL the items in the array and replaces their content such that they match the old content of the array, after adding the new item. WHICH IS INEFFIECIENT performance wise AND CAN CAUSE BUGS.\r\n                title={expense.title}\r\n                date={expense.date}\r\n                amount={expense.amount}\r\n            />\r\n            ))}\r\n        </ul>\r\n    )\r\n};\r\n\r\n\r\nexport default ExpensesList;","import React from \"react\";\r\n\r\nimport \"./ExpensesFilter.css\";\r\n\r\nconst ExpensesFilter = (props) => {\r\n\r\n    const dropdownChangeHandler = (event) => {\r\n        props.onChangeFilter(event.target.value);\r\n    };\r\n\r\n  return (\r\n    <div className=\"expenses-filter\">\r\n\r\n      <div className=\"expenses-filter__control\">\r\n\r\n        <label>Filter by year</label>\r\n        <select value={props.selected} onChange={dropdownChangeHandler} >\r\n          <option value=\"2022\">2022</option>\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n          <option value=\"2019\">2019</option>\r\n        </select>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpensesFilter;\r\n","import React from 'react';\r\n\r\nimport './ChartBar.css';\r\n\r\nconst ChartBar = (props) => {\r\n  let barFillHeight = '0%';\r\n\r\n  if (props.maxValue > 0) {\r\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + '%';\r\n  }\r\n\r\n  return (\r\n    <div className='chart-bar'>\r\n      <div className='chart-bar__inner'>\r\n        <div\r\n          className='chart-bar__fill'\r\n          style={{ height: barFillHeight }}\r\n        ></div>\r\n      </div>\r\n      <div className='chart-bar__label'>{props.label}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartBar;\r\n\r\n","import React from 'react';\r\n\r\nimport ChartBar from './ChartBar';\r\nimport './Chart.css';\r\n\r\nconst Chart = (props) => {\r\n  const dataPointValues = props.dataPoints.map(dataPoint => dataPoint.value);\r\n  const totalMaximum = Math.max(...dataPointValues);\r\n\r\n  return (\r\n    <div className='chart'>\r\n      {props.dataPoints.map((dataPoint) => (\r\n        <ChartBar\r\n          key={dataPoint.label}\r\n          value={dataPoint.value}\r\n          maxValue={totalMaximum}\r\n          label={dataPoint.label}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;","import React from 'react';\r\n\r\nimport Chart from '../Chart/Chart';\r\n\r\nconst ExpensesChart = (props) => {\r\n  const chartDataPoints = [\r\n    { label: 'Jan', value: 0 },\r\n    { label: 'Feb', value: 0 },\r\n    { label: 'Mar', value: 0 },\r\n    { label: 'Apr', value: 0 },\r\n    { label: 'May', value: 0 },\r\n    { label: 'Jun', value: 0 },\r\n    { label: 'Jul', value: 0 },\r\n    { label: 'Aug', value: 0 },\r\n    { label: 'Sep', value: 0 },\r\n    { label: 'Oct', value: 0 },\r\n    { label: 'Nov', value: 0 },\r\n    { label: 'Dec', value: 0 },\r\n  ];\r\n\r\n  for (const expense of props.expenses) {\r\n    const expenseMonth = expense.date.getMonth(); // starting at 0 => January => 0\r\n    chartDataPoints[expenseMonth].value += expense.amount;\r\n  }\r\n\r\n  return (<Chart dataPoints={chartDataPoints} />);\r\n};\r\n\r\nexport default ExpensesChart;","import React, { useState } from \"react\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\nimport \"./Expenses.css\";\r\n\r\n// ****** JavaScipt *******\r\n// The \"map()\" method creates a new array with the results of calling a function for every array element.\r\n// The \"filter()\" method creates a new array with all elements that pass the test implemented by the provided function.\r\n// *************************************************************************************************************\r\n\r\n// ****** Conditional Expressions in React *******\r\n// Long statements like (\"if\" condition and \"for\" loop) are not allowed inside JSX code, between curly braces \"{...}\".\r\n// INSTEAD we can use a TERNARY EXPRESSION.\r\n// ie: {filteredExpenses === 0 ? <p>Write a message</p> : // otherwise fo something else}\r\n// another expression we can use --> {filteredExpenses === 0 && <p>Write a message</p>}  //means if filteredExpenses is equal to 0 --> then add the <p></p> element\r\n/* same as {if (filteredExpenses === 0) {\r\n              <p>Write a message</p>\r\n           }\r\n           else\r\n           {\r\n            // do something else\r\n           }};    */\r\n\r\n// DIDNT USE A TERNARY EXPRESSION HERE THO, INSTEAD I MOVED THE LOGIC OUT OF THE RETURN FUNCTION, SO THAT IT WOULD NOT BE JSX CODE AND\r\n// AND I CAN USE A REGULAR JAVASCRIPT CONDITION.\r\n// *************************************************************************************************************\r\n\r\nconst Expenses = (props) => {\r\n\r\n  const [filteredYear, setFilteredYear] = useState(\"2021\");\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n    console.log(selectedYear);\r\n  };\r\n\r\n  // this function filters the \"items\" array (which we get from the \"App.js\" file) by the year that we choose from the drop down.\r\n  // \"filteredYear\" is a STRING, where as our \"date\" is a date OBJEC --> which is why we have to \"getFullYear()\" first, and then convert it \"toString()\".\r\n  const filteredExpenses = props.items.filter(filterByYear => filterByYear.date.getFullYear().toString() === filteredYear);\r\n  console.log(filteredExpenses);\r\n\r\n\r\n  return (\r\n    /* Must have one ROOT JSX element, that wraps around the main JSX code */\r\n\r\n    <Card className=\"expenses\">\r\n\r\n      <ExpensesFilter onChangeFilter={filterChangeHandler} selected={filteredYear} /> {/* \"selected={filteredYear}\" is to control the initial value \r\n                                                                                           year that is set in the \"useState(\"2021\")\", in the web browser. */ }\r\n      <ExpensesChart expenses={filteredExpenses}/>\r\n      <ExpensesList passedFilteredExpenses={filteredExpenses}/> {/* Need to pass the \"filteredExpenses\" to \"expensesList.js\" */}\r\n\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n","import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\n// Event listeners (listens to an event) in React:\r\n// \"onInput\" ---> listens/triggers on every KEYSTROKE, can only be used for\r\n// \"onChange\" ---> also listens/triggers on every KEYSTROKE, but the advantage of it is that it can be used for every type of input\r\n//                 (for example: also for drop menus)\r\n// \"onSubmit\" ---> if a button with type submit (ie: <button type:\"submit\"> Click Me </button>), is pressed inside of a form in a web browser, then the\r\n//                 overall <form> HTML element will emmit an event to which we can listen to by adding the \"onSubmit\" event listener as an attribute to\r\n//                 the form element.\r\n\r\n\r\n\r\n\r\n/*********************************************** PASSING DATA from CHILD-TO-PARENT COMPONENTS ***********************************************/\r\n  /* After storing the data and combining it into a JavaScript object ---> Now we want to pass it to the \"App.js\" component which has the list of existing expenses */\r\n  /* Inorder to do so, we first have to pass it to the \"NewExpense.js\" component and THEN to the \"App.js\" because \"App.js\" is accessing the expense form (this component)\r\n     through the \"NewExpense.js\" component. SO WE CANNOT SKIP COMPONENTS IN BETWEEN.  **** \"PROPS\" CAN ONLY BE PASSED FROM PARENT TO CHILD. **** */ \r\n  /* So to pass data up from Child to Parent components, we do is this: \r\n                                    1. Pass a function from a Parent component to a Child component \r\n                                    2. Then call that function inside the child component \r\n                                    3. When we call that function in the child component, we can then pass the DATA into that function as a parameter.*/\r\n\r\n  /* Steps: 1. Create a function and an attribute in the Parent of this component (\"NewExpense.js\") ----> \r\n                        a. Create a function in \"NewExpense.js\" component with a paramter (any name for parameter). And inside this function, create a JavaScript \r\n                           object that pulls the data from the \"expenseDate\" javascript object here in this component, using the spread operator. \r\n                             (ie: const saveEnteredDataHandler = (enteredExpenseData) {\r\n                                        const expenseData = {\r\n                                            ...enteredExpenseData,\r\n                                            id: Math.Random().toString;\r\n                                        }\r\n                                  })\r\n                        b. Add a new attribiute/prop to the \"expenseForm\" element in \"NewExpense.js\" component. Can name the attribute anything we want, but \r\n                           using \"on\" in the name makes it clear that the value of this attribute/prop should be a function that will be triggered, when the form is\r\n                           submitted. The value of this attribute/prop is a function that will then be called inside the \"ExpenseForm.js\" compoent (this component).\r\n                            (ie: <expenseForm onSaveExpenseData={saveEnteredDataHandler} />  \r\n                                **** THIS ATTRIBUTE PASSES ITS VALUE, TO THE EXPENSE FORM ****\r\n                \r\n                2. Use this function in the CHILD component (this compoenet): \r\n                                a. Add the \"props\" keyword as an attribute to this component's function. \r\n                                b. Call the function we created in its Parent component (\"saveEnteredDataHandler\") in the Child component (this one), inside\r\n                                   the \"formHandler\" function, through \"props\". And pass in the \"expenseData\" javascript object as a parameter inside it.\r\n                                        (ie: props.onSaveExpenseData(expenseData);)  *** USE THE NAME OF THE ATTRIBUTE *** \r\n                                                ** here the parameter passes the \"expenseData\" javascript object properties (in this component) \r\n                                                   into the \"saveEnteredDataHandler\" function, in the \"newExpenseData\" component, through its parameter. **\r\n                                 \r\n                3. Then, in the \"App.js\" component do the same thing:\r\n                                a. add a function with a paramter. (The paramter will let get the expenses data from the \"NewExpense.js\" component, when \r\n                                    we use it there using \"props\")\r\n                                        (ie: const addExpenseHandler = (expense) => {\r\n                                                    console.log(expense);\r\n                                              };)\r\n                                b. add an attribute to the \"NewExpense\" element in \"App.js\" (give it any name), with a the function we created, as a value\r\n                                        (ie: <NewExpense onAddExpense={addExpenseHandler} />)   \r\n                \r\n                4. Lastly, in \"NewExpense.js\" component: \r\n                                a. Add the \"props\" keyword as an attribute to the component's function \r\n                                b. Call the function we created in its Parent component (\"App.js\"), inside\r\n                                   the \"saveEnteredDataHandler\" function, through \"props\". And pass in the \"expenseData\" javascript object as a parameter inside it.\r\n                                    (ie: props.onAddExpense(expenseData))               */\r\n // *************************************************************************************************************************************************************x\r\n\r\n\r\n\r\n\r\n\r\n// \"props\" lets us access attribute values (which have functions), from parent components or other components.\r\nconst ExpenseForm = (props) => {\r\n  /* After we get the key value of the KEY PRESSED --> we want to store it somewhere inorder to use that value.\r\n     Inother words, we want to gather all the values, for ALL the inputs, and combine them as an object, when the form is submitted.\r\n     SO Inorder to store these values, and make sure they survive if the this component/function is re-executed --> WE USE THE \"useState\" HOOK. */\r\n\r\n  // YOU CAN HAVE MULTIPLE STATES PER COMPONENT/FUNCTION. (each one is seperate from the other)\r\n\r\n  const [titleEntered, setTitleEntered] = useState(\"\"); /* We use the \"useState\" HOOK here, inorder to STORE the key press values that we enter in the title input,\r\n                                                              INTO OUR STATE or into a VARIABLE (\"titleEntered\"). \r\n                                                              So that the stored key press values in the state SURVIVES if we re-execute the component.*/\r\n  // The \"useState\" parameter is an EMPTY STRING, because the initial value of the title input is EMPTY.\r\n\r\n  const [amountEntered, setAmountEntered] = useState(\"\");\r\n  const [dateEntered, setDateEntered] = useState(\"\");\r\n\r\n  // [DONT USE]\r\n  /* Another way of writing multiple STATES: \r\n       Instead of having multiple states in one component, we can have ONLY ONE state that contains a javascript OBJECT with all of the initial values\r\n       of the things we want to store. \r\n       ie: const [userInput, setUserInput] = useState({\r\n              enteredTitle: \" \",\r\n              enteredAmount: \" \",\r\n              enteredDate: \" \",\r\n           });  \r\n           \r\n           */\r\n\r\n  const titleChangeHandler = (event) => { // The parameter within the Callback function (event) refers to what triggered the event\r\n    \r\n    setTitleEntered(event.target.value); /* Stores the KEY press/button that caused the event, into the \"titleEntered\" variable --> using the \r\n                                                \"setTitleEntered\" function */\r\n    //console.log(titleEntered); // this is just to make sure that the values are INDEED getting stored in the \"titleEntered\" variable.\r\n\r\n    // [Another way (DONT USE)]\r\n    // ************************************************** MEMORISE ************************************************\r\n    // **************** Whenever our State update depends on a PREVIOUS State, use this function form. ***************\r\n    /* setUserInput( (prevState) => { // \"prevState\" refers to the LATEST state snapshot of the \"useState\" funtion's object, keeping all state updates in mind. \r\n            return (\r\n                ...prevState,    // We can use the spread operator to pull all the key-value pairs from the javascript OBJECT, in the prevState function (which its values come from the useState function's object), and adds it to the new object (\"setUserInput\")\r\n                enteredTitle: event.target.value,  // and then override the value we want to change\r\n            );\r\n        }); */\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n\r\n    setAmountEntered(event.target.value);\r\n\r\n    // [Another way (DONT USE)]\r\n    /* setUserInput( (prevState) => {\r\n            return (\r\n                ...prevState,    \r\n                enteredAmount: event.target.value,\r\n           }); */\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    setDateEntered(event.target.value);\r\n\r\n    // [Another way (DONT USE)]\r\n    /* setUserInput( (prevState) => {\r\n            return (\r\n                ...prevState,    \r\n                enteredDate: event.target.value,\r\n           }); */\r\n  };\r\n\r\n  /* This function collects and combines the data we stored into the \"status\" functions (ie: \"titleEntered\"), into a javascript object. \r\n     So that we can later do something with it. */\r\n  const formHandler = (event) => {\r\n    // \"event\" refers to what triggered the event (ie: when we click the submit button)\r\n    /* Whenever we click the SUBMIT button (inside the form element), the web browser refreshes the web page by default, which is NOT WHAT WE WANT. \r\n           We want to handle the form submission through javascript, inorder to manually collect and combine the data into an object and do something with it.\r\n           So we use the \"preventDefault()\" which is a default javascript method. So it prevents refreshing the page when the submit button is clicked, because \r\n           it doesn't actually submit the data or do anything. */\r\n    event.preventDefault();\r\n\r\n    // This object combines all the entered data.\r\n    const expenseData = {\r\n      title: titleEntered, // \"titleEntered\" refers to the variable in the destructing array, in which we store the data entered in the title input element.\r\n      amount: +amountEntered,\r\n      date: new Date(dateEntered), // parses the date string (\"dateEntered\") and converts it into a date object.\r\n    };\r\n   \r\n\r\n    props.onSaveExpenseData(expenseData); /* passes \"expenseData\" javascript object properties to the \"onSaveExpenseData()\" function's parameter, \r\n                                            located in this component's parent (\"NewExpense.js\"). HAVE TO USE THE NAME (KEY) OF THE ATTRIBUTE IN THE PARENT */\r\n    setTitleEntered(\"\"); /* overrides what user entered, after the form was submitted --> and therefor clear the input to an empty string.\r\n                            [have to add the \"value\" attribute with the \"titleEntered\" variable, to the corresponding input element] */\r\n    setAmountEntered(\"\");\r\n    setDateEntered(\"\");\r\n  };\r\n\r\n  \r\n\r\n  return (\r\n    <form onSubmit={formHandler}>\r\n      \r\n      {/* we want to execute a function when this form is being submitted, through the \"onSubmit\" event listener. */}\r\n      <div className=\"expense-form\">\r\n        <div className=\"expense-form__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            /* This is TWO-WAY BINDING **** (allows us to gather user input (through \"onChange\" event) but then also change it (through \"value\" attribute)\r\n               (for example: upon form submission)) */\r\n            value={titleEntered} // a prop that passes a new value into the input, so that we can reset or change the input programmtaically \r\n                                 // (This will let us reset the input value that the user typed in, when we click the SUBMIT button). \r\n                                 // [we need to also set the string of the \"setTitleEntered\" to an empty string (\"\") in the formHandler function ***.]\r\n            onChange={titleChangeHandler} // listens to changes in the input to update the state\r\n          />\r\n        </div>\r\n\r\n        <div className=\"expense-form__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={amountEntered}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"expense-form__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            value={dateEntered}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"expense-form__actions\">\r\n        <button type=\"button\" onClick={props.onCancel}>Cancel</button>\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React, { useState } from \"react\"; // dont need this tho    \r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport \"./NewExpense.css\";\r\n\r\n\r\n// This component will return an HTML form for USER inputs, where they can add their expenses.\r\nconst NewExpense = (props) => { // \"props\" lets us access attribute values (which have functions), from parent components or other compoenents.\r\n    const saveExpenseDataHandler = (enteredExpenseData) => { // We get the expense data properties through this parameter. Check \"ExpenseForm.js\" for explanation.\r\n        const expenseData = {\r\n            ...enteredExpenseData,\r\n            id: Math.random().toString(),\r\n        }\r\n        props.onAddExpense(expenseData); /* passes \"expenseData\" javascript object properties to the \"onAddExpense()\" function's parameter, \r\n                                            located in this component's parent (\"App.js\"). HAVE TO USE THE NAME (KEY) OF THE ATTRIBUTE IN THE PARENT */\r\n        setIsEditing(false);\r\n    };\r\n\r\n\r\n    // This opens up the user input form tab, when the add new expense button is clicked.\r\n    const [isEditing, setIsEditing] = useState(false)\r\n\r\n    const isEditingHandler = () => {\r\n        setIsEditing(true);\r\n    };\r\n\r\n    const onCancelHandler = () => {\r\n        setIsEditing(false);\r\n    };\r\n  \r\n\r\n    return (\r\n        <div className=\"new-expense\">\r\n            {!isEditing && <button onClick={isEditingHandler}>Add New Expense</button>}\r\n            {isEditing && <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} onCancel={onCancelHandler}/>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default NewExpense;","// **************** What is the \"App.js\" file used for? ****************\n// The \"App.js\" is a SPECIAL kind of component. It is our ROOT component which means\n// its the main component being rendered in our starting file (the \"index.js\" file).\n// All other components that we create will be nested inside this file.\n// ***********************************************************************************************************************************\n\n\n// **************** Importing other files here ****************\n// We import files at the top.\n// import {name of the function} from {its location in our project}\nimport React, { useState } from 'react';\nimport Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\n// After importing, now we can use the custom component (\"ExpenseItem\") like a\n// regular HTML element, just like we use any HTML element (ie: <h2></h2>).\n// ***********************************************************************************************************************************\n\n\n// **************** Difference between HTML built-in Elements, and React custom Elements/Components  ****************\n/* VERY IMPORTANT: The key difference between built-in HTML elements and our custom elements/components, is that \nour custom elements MUST start with an UPPERCASE character or else react wouldn't be able \nto detect that it is a custom component */\n/* SO THING TO REMEMBER: Is that built-in HTML elements starts with a LOWERCASE.\n                          And our custom components/elements starts with an UPPERCASE. \n                                      inorder for them to be detected by React */\n/* Must use the exact name that we used in the import */\n// ***********************************************************************************************************************************\n\n\n// ************************** HOW TO HAVE REUSABLE FUNCTIONS that we can call and change multiple times? ********************************\n                                  // FIRST PART\n// *** A concept called \"Props\" (stands for properties) in React, enables us to make the components reusable by using parameters.\n/* We make a function (in a component) resuable by adding a paramter to it (\"props\") --> which lets us call the same function, but \n   with different parameter input values and thus the function produces different output values and become reusable. */\n/* The paramter values, which will be placed inside the component function to output different results, ARE STORED HERE in \"App.js\" file, \n   ussually as an ARRAY that have multiple javascript OBJECTS to store different values. */\n// Component elements (ie: \"<ExpenseItem>\") can have attributes just like in HTML elements (ie: \"<ExpenseItem title={expenses[0].title}> ).\n/* these attributes are \"Key-Value\" pairs --> \"key\" is the attribute name (ie: \"title\") and values will be their values that we set\n       (ie: \"{expenses[0].title}\" ) */\n/* These attributes names can be ANYTHING WE WANT.\n     The component attributes values come from an ARRAY that contains multiple \n     Javascript OBJECTS that we created here in \"App.js\".*/\n// **********\n  /* SUMMARY: 1. Create a new component.\n              2. Create a function with a parameter (props) in that component, with a return function that has JSX code in it.\n              3. Import that component here and then add it to the \"App\" function, as custom React elements.\n              3. Then create a javascript object, inside the \"App\" function, that will have an Array of properties.\n              4. Then use these properties as attributes in the custom React elements.\n              5. Lastly go back to the component we created and reference those attributes in the jsx code, using the \"props\" parameter.*/\n// ***********************************************************************************************************************************\n\n\nconst DUMMY_INITIAL_EXPENSES = [\n  {\n    id: \"e1\",\n    title: \"Car Insurance\",\n    date: new Date(2021, 12, 28),\n    amount: 300.18,\n  },\n\n  {\n    id: \"e2\",\n    title: \"Toilet Paper\",\n    date: new Date(2021, 11, 20),\n    amount: 265.35,\n  },\n\n  {\n    id: \"e3\",\n    title: \"New TV\",\n    date: new Date(2021, 8, 20),\n    amount: 465.25,\n  },\n\n  {\n    id: \"e4\",\n    title: \"New Bed\",\n    date: new Date(2021, 1, 20),\n    amount: 600.87,\n  },\n];\n\n\n\n// ARROW FUNCTION (alternative syntax for wrinting a function)\nconst App = () => {\n\n  // THIS IS HOW WE ADD A NEW EXPENSE ITEM USING STATE.\n  const [addedExpense, setAddedExpense] = useState(DUMMY_INITIAL_EXPENSES);\n\n  const addExpenseHandler = (expense) => {\n    console.log(\"Getting Form Expense Data from App.js\");\n    // This way of updating the state is not REEAAAALLY correct. It would still work tho.\n    /* setAddedExpense([expense, ...addedExpense]);   ** since the data passed from the \"onAddExpense\" attribute is an Array, we have to use an array here.\n                                                         We also use the spread operator to pull all the previous object's arrays that we already added from \n                                                         to the \"addedExpense\" */\n    \n    // The CLEAN way of updating our state when its based on older snapshots of that same state\n    // If we're updating the state, depending on the previour state, WE SHOULD USE THIS SPECIAL FUNCTION FORM:\n        // So that we pass a FUNCTION as an argument/parameter, and then that FUNCTION will automatically receive the latest state snapshot/properties\n    setAddedExpense((prevExpenses) => {\n      return ([expense, ...prevExpenses]);\n    })\n\n  };\n\n\n  // An array that takes in multiple javascript objects\n  /*  The data in the different objects (properties) in the array, will be passed onto the React custom component/element (ie: \"<ExpenseItem>\"),\n       as attributes, which will then be passed onto the JSX code in the \"ExpenseItem.js\" file */\n  \n\n\n  return (\n    <div>\n\n      <NewExpense onAddExpense={addExpenseHandler} />\n      {/* React custom elements. */}\n      {/* We are feeding the \"expenses\" properties to the \"Expenses\" component/file --> which then feeds these properties into the\n         \"ExpenseItem\" component/file that has the JSX code (HTML code in JavaScript  */}\n       {/* This attribute/prop is a key-value pair --> key is \"items\" and \"expenses\" is value.   Key (name of the attribute) \n            should match the one in \"Expenses* file */}\n      <Expenses items={addedExpense} />\n\n    </div>\n  );\n}\n\nexport default App;\n","// In React, this is the FIRST file that will be executed when running in the browser, \n// unlike in Native Javascript where the \"index.html\" file is the first to be executed and then the rest.\n\nimport ReactDOM from 'react-dom';\n\n\nimport './index.css'; // for css files we keep the \".css\" \nimport App from './App'; // we ommit the \".js\" when importing javascript files\n\n// This references the \"App.js\" component, which has all the other components that we created, nested in.\n// We only render the \"App.js\" (root). Other components will be rendered through the \"App.js\" file which has all the \n// other components nested in.\nReactDOM.render(<App />, document.getElementById('root'));"]}}