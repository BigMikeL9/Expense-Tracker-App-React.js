{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\burni\\\\Desktop\\\\React - Web Dev\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\Expenses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ExpensesList from \"./ExpensesList\";\nimport Card from \"../UI/Card\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport \"./Expenses.css\"; // ****** JavaScipt *******\n// The \"map()\" method creates a new array with the results of calling a function for every array element.\n// The \"filter()\" method creates a new array with all elements that pass the test implemented by the provided function.\n// *************************************************************************************************************\n// ****** Conditional Expressions in React *******\n// Long statements like (\"if\" condition and \"for\" loop) are not allowed inside JSX code, between curly braces \"{...}\".\n// INSTEAD we can use a TERNARY EXPRESSION.\n// ie: {filteredExpenses === 0 ? <p>Write a message</p> : // otherwise fo something else}\n\n/* same as {if (filteredExpenses === 0) {\r\n              <p>Write a message</p>\r\n           }\r\n           else\r\n           {\r\n            // do something else\r\n           }};    */\n// DIDNT USE A TERNARY EXPRESSION HERE THO, INSTEAD I MOVED THE LOGIC OUT OF THE RETURN FUNCTION, SO THAT IT WOULD NOT BE JSX CODE AND\n// AND I CAN USE A REGULAR JAVASCRIPT CONDITION.\n// *************************************************************************************************************\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Expenses = props => {\n  _s();\n\n  const [filteredYear, setFilteredYear] = useState(\"2021\");\n\n  const filterChangeHandler = selectedYear => {\n    setFilteredYear(selectedYear);\n    console.log(selectedYear);\n  }; // this function filters the \"items\" array (which we get from the \"App.js\" file) by the year that we choose from the drop down.\n  // \"filteredYear\" is a STRING, where as our \"date\" is a date OBJEC --> which is why we have to \"getFullYear()\" first, and then convert it \"toString()\".\n\n\n  const filteredExpenses = props.items.filter(filterByYear => filterByYear.date.getFullYear().toString() === filteredYear);\n  console.log(filteredExpenses);\n  return (\n    /*#__PURE__*/\n\n    /* Must have one ROOT JSX element, that wraps around the main JSX code */\n    _jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        onChangeFilter: filterChangeHandler,\n        selected: filteredYear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), \" \", /*#__PURE__*/_jsxDEV(ExpensesList, {\n        passedFilteredExpenses: filteredExpenses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(Expenses, \"mdIsaHWtxuZbTDv6nUGN/ApvXr0=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/Expenses/Expenses.js"],"names":["React","useState","ExpensesList","Card","ExpensesFilter","Expenses","props","filteredYear","setFilteredYear","filterChangeHandler","selectedYear","console","log","filteredExpenses","items","filter","filterByYear","date","getFullYear","toString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAO,gBAAP,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAE1B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,MAAD,CAAhD;;AAEA,QAAMQ,mBAAmB,GAAIC,YAAD,IAAkB;AAC5CF,IAAAA,eAAe,CAACE,YAAD,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACD,GAHD,CAJ0B,CAS1B;AACA;;;AACA,QAAMG,gBAAgB,GAAGP,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAmBC,YAAY,IAAIA,YAAY,CAACC,IAAb,CAAkBC,WAAlB,GAAgCC,QAAhC,OAA+CZ,YAAlF,CAAzB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYC,gBAAZ;AAGA;AAAA;;AACE;AAEA,YAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA,8BAEE,QAAC,cAAD;AAAgB,QAAA,cAAc,EAAEJ,mBAAhC;AAAqD,QAAA,QAAQ,EAAEF;AAA/D;AAAA;AAAA;AAAA;AAAA,cAFF,oBAKE,QAAC,YAAD;AAAc,QAAA,sBAAsB,EAAEM;AAAtC;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF;AAYD,CA3BD;;GAAMR,Q;;KAAAA,Q;AA6BN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport \"./Expenses.css\";\r\n\r\n// ****** JavaScipt *******\r\n// The \"map()\" method creates a new array with the results of calling a function for every array element.\r\n// The \"filter()\" method creates a new array with all elements that pass the test implemented by the provided function.\r\n// *************************************************************************************************************\r\n\r\n// ****** Conditional Expressions in React *******\r\n// Long statements like (\"if\" condition and \"for\" loop) are not allowed inside JSX code, between curly braces \"{...}\".\r\n// INSTEAD we can use a TERNARY EXPRESSION.\r\n// ie: {filteredExpenses === 0 ? <p>Write a message</p> : // otherwise fo something else}\r\n/* same as {if (filteredExpenses === 0) {\r\n              <p>Write a message</p>\r\n           }\r\n           else\r\n           {\r\n            // do something else\r\n           }};    */\r\n\r\n// DIDNT USE A TERNARY EXPRESSION HERE THO, INSTEAD I MOVED THE LOGIC OUT OF THE RETURN FUNCTION, SO THAT IT WOULD NOT BE JSX CODE AND\r\n// AND I CAN USE A REGULAR JAVASCRIPT CONDITION.\r\n// *************************************************************************************************************\r\n\r\nconst Expenses = (props) => {\r\n\r\n  const [filteredYear, setFilteredYear] = useState(\"2021\");\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n    console.log(selectedYear);\r\n  };\r\n\r\n  // this function filters the \"items\" array (which we get from the \"App.js\" file) by the year that we choose from the drop down.\r\n  // \"filteredYear\" is a STRING, where as our \"date\" is a date OBJEC --> which is why we have to \"getFullYear()\" first, and then convert it \"toString()\".\r\n  const filteredExpenses = props.items.filter(filterByYear => filterByYear.date.getFullYear().toString() === filteredYear);\r\n  console.log(filteredExpenses);\r\n\r\n\r\n  return (\r\n    /* Must have one ROOT JSX element, that wraps around the main JSX code */\r\n\r\n    <Card className=\"expenses\">\r\n\r\n      <ExpensesFilter onChangeFilter={filterChangeHandler} selected={filteredYear} /> {/* \"selected={filteredYear}\" is to control the initial value \r\n                                                                                           year that is set in the \"useState(\"2021\")\", in the web browser. */ }\r\n      \r\n      <ExpensesList passedFilteredExpenses={filteredExpenses}/> {/* Need to pass the \"filteredExpenses\" to \"expensesList.js\" */}\r\n\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n"]},"metadata":{},"sourceType":"module"}