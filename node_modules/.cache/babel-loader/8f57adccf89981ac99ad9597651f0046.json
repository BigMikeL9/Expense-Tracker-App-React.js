{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\burni\\\\Desktop\\\\React - Web Dev\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './ExpenseForm.css'; // Event listeners (listens to an event) in React:\n// \"onInput\" ---> listens/triggers on every KEYSTROKE, can only be used for \n// \"onChange\" ---> also listens/triggers on every KEYSTROKE, but the advantage of it is that it can be used for every type of input \n//                 (for example: also for drop menus)\n// \"onSubmit\" ---> if a button with type submit, is pressed inside of a form can be used on <form> HTML elements to listen for when the submit button (in the form) is clicked, and thus the form is submitted.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  // YOU CAN HAVE MULTIPLE STATES PER COMPONENT/FUNCTION. (each one is seperate from the other)\n  const [titleEntered, setTitleEntered] = useState(\"\");\n  /* We use the \"useState\" HOOK here, inorder to STORE the key press values that we enter in the title input,\r\n     INTO OUR STATE or into a VARIABLE (\"titleEntered\"). \r\n     So that the stored key press values in the state SURVIVES if we re-execute the component.*/\n  // The \"useState\" parameter is an EMPTY STRING, because the initial value of the title input is EMPTY.\n\n  const [amountEntered, setAmountEntered] = useState(\"\");\n  const [dateEntered, setDateEntered] = useState(\"\"); // [DONT USE]\n\n  /* Another way of writing multiple STATES: \r\n     Instead of having multiple states in one component, we can have ONLY ONE state that contains a javascript OBJECT with all of the initial values\r\n     of the things we want to store. \r\n     ie: const [userInput, setUserInput] = useState({\r\n            enteredTitle: \" \",\r\n            enteredAmount: \" \",\r\n            enteredDate: \" \",\r\n         });  \r\n         \r\n         */\n\n  const titleChangeHandler = event => {\n    // The parameter within the Callback function (event) refers to what triggered the event\n    setTitleEntered(event.target.value);\n    /* Stores the KEY press/button that caused the event, into the \"titleEntered\" variable --> using the \r\n       \"setTitleEntered\" function */\n\n    console.log(titleEntered); // this is just to make sure that the values are INDEED getting stored in the \"titleEntered\" variable.\n    // [Another way (DONT USE)]\n    // ************************************************** MEMORISE ************************************************\n    // **************** Whenever our State update depends on a PREVIOUS State, use this function form. ***************\n\n    /* setUserInput( (prevState) => { // \"prevState\" refers to the LATEST state snapshot of the \"useState\" funtion's object, keeping all state updates in mind. \r\n        return (\r\n            ...prevState,    // We can use the spread operator to pull all the key-value pairs from the javascript OBJECT, in the prevState function (which its values come from the useState function's object), and adds it to the new object (\"setUserInput\")\r\n            enteredTitle: event.target.value,  // and then override the value we want to change\r\n        );\r\n    }); */\n  };\n\n  const amountChangeHandler = event => {\n    setAmountEntered(event.target.value); // [Another way (DONT USE)]\n\n    /* setUserInput( (prevState) => {\r\n        return (\r\n            ...prevState,    \r\n            enteredAmount: event.target.value,\r\n       }); */\n  };\n\n  const dateChangeHandler = event => {\n    setDateEntered(event.target.value); // [Another way (DONT USE)]\n\n    /* setUserInput( (prevState) => {\r\n        return (\r\n            ...prevState,    \r\n            enteredDate: event.target.value,\r\n       }); */\n  }; // After we get the key value of the KEY PRESSED --> we want to store it somewhere inorder to use that value.\n  // Inother words, we want to gather all the values, for ALL the inputs, and combine them as an object, when the form is submitted.\n  // SO Inorder to store these values, and make sure they survive if the this component/function is re-executed --> WE USE THE \"useState\" HOOK.\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-form__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-form__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-form__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-form__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpenseForm, \"sJvDYNUio1JZBb5QdycjEL0B0kI=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","titleEntered","setTitleEntered","amountEntered","setAmountEntered","dateEntered","setDateEntered","titleChangeHandler","event","target","value","console","log","amountChangeHandler","dateChangeHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,mBAAP,C,CAEA;AACI;AACA;AACA;AACA;;;;AAGJ,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAEtB;AAEA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCH,QAAQ,CAAC,EAAD,CAAhD;AAAuD;AAC3D;AACA;AAC2D;;AAEvD,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C,CAVsB,CAYtB;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,QAAMQ,kBAAkB,GAAIC,KAAD,IAAW;AAAE;AACpCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AAAqC;AAC7C;;AACQC,IAAAA,OAAO,CAACC,GAAR,CAAYX,YAAZ,EAHkC,CAGP;AAE3B;AACA;AACA;;AACA;AACR;AACA;AACA;AACA;AACA;AACK,GAdD;;AAgBA,QAAMY,mBAAmB,GAAIL,KAAD,IAAW;AACnCJ,IAAAA,gBAAgB,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB,CADmC,CAGnC;;AACA;AACR;AACA;AACA;AACA;AACK,GATD;;AAWA,QAAMI,iBAAiB,GAAIN,KAAD,IAAW;AACjCF,IAAAA,cAAc,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd,CADiC,CAGjC;;AACA;AACR;AACA;AACA;AACA;AACK,GATD,CAnDsB,CA8DtB;AACA;AAEA;;;AAEA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,QAAQ,EAAEH;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,GAAG,EAAC,MAAzB;AAAgC,UAAA,IAAI,EAAC,MAArC;AAA4C,UAAA,QAAQ,EAAEM;AAAtD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAWI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,GAAG,EAAC,YAAvB;AAAoC,UAAA,GAAG,EAAC,YAAxC;AAAqD,UAAA,QAAQ,EAAEC;AAA/D;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAkBI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,6BACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH,CA3FD;;GAAMd,W;;KAAAA,W;AA8FN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport './ExpenseForm.css';\r\n\r\n// Event listeners (listens to an event) in React:\r\n    // \"onInput\" ---> listens/triggers on every KEYSTROKE, can only be used for \r\n    // \"onChange\" ---> also listens/triggers on every KEYSTROKE, but the advantage of it is that it can be used for every type of input \r\n    //                 (for example: also for drop menus)\r\n    // \"onSubmit\" ---> if a button with type submit, is pressed inside of a form can be used on <form> HTML elements to listen for when the submit button (in the form) is clicked, and thus the form is submitted.\r\n\r\n\r\nconst ExpenseForm = () => {\r\n\r\n    // YOU CAN HAVE MULTIPLE STATES PER COMPONENT/FUNCTION. (each one is seperate from the other)\r\n\r\n    const [titleEntered, setTitleEntered] = useState(\"\");  /* We use the \"useState\" HOOK here, inorder to STORE the key press values that we enter in the title input,\r\n                                                              INTO OUR STATE or into a VARIABLE (\"titleEntered\"). \r\n                                                              So that the stored key press values in the state SURVIVES if we re-execute the component.*/\r\n                                                           // The \"useState\" parameter is an EMPTY STRING, because the initial value of the title input is EMPTY.\r\n    \r\n    const [amountEntered, setAmountEntered] = useState(\"\");\r\n    const [dateEntered, setDateEntered] = useState(\"\");\r\n\r\n    // [DONT USE]\r\n    /* Another way of writing multiple STATES: \r\n       Instead of having multiple states in one component, we can have ONLY ONE state that contains a javascript OBJECT with all of the initial values\r\n       of the things we want to store. \r\n       ie: const [userInput, setUserInput] = useState({\r\n              enteredTitle: \" \",\r\n              enteredAmount: \" \",\r\n              enteredDate: \" \",\r\n           });  \r\n           \r\n           */\r\n\r\n    const titleChangeHandler = (event) => { // The parameter within the Callback function (event) refers to what triggered the event\r\n        setTitleEntered(event.target.value); /* Stores the KEY press/button that caused the event, into the \"titleEntered\" variable --> using the \r\n                                                \"setTitleEntered\" function */\r\n        console.log(titleEntered); // this is just to make sure that the values are INDEED getting stored in the \"titleEntered\" variable.\r\n\r\n        // [Another way (DONT USE)]\r\n        // ************************************************** MEMORISE ************************************************\r\n        // **************** Whenever our State update depends on a PREVIOUS State, use this function form. ***************\r\n        /* setUserInput( (prevState) => { // \"prevState\" refers to the LATEST state snapshot of the \"useState\" funtion's object, keeping all state updates in mind. \r\n            return (\r\n                ...prevState,    // We can use the spread operator to pull all the key-value pairs from the javascript OBJECT, in the prevState function (which its values come from the useState function's object), and adds it to the new object (\"setUserInput\")\r\n                enteredTitle: event.target.value,  // and then override the value we want to change\r\n            );\r\n        }); */\r\n    };\r\n\r\n    const amountChangeHandler = (event) => {\r\n        setAmountEntered(event.target.value);\r\n\r\n        // [Another way (DONT USE)]\r\n        /* setUserInput( (prevState) => {\r\n            return (\r\n                ...prevState,    \r\n                enteredAmount: event.target.value,\r\n           }); */\r\n    };\r\n\r\n    const dateChangeHandler = (event) => {\r\n        setDateEntered(event.target.value);\r\n\r\n        // [Another way (DONT USE)]\r\n        /* setUserInput( (prevState) => {\r\n            return (\r\n                ...prevState,    \r\n                enteredDate: event.target.value,\r\n           }); */\r\n    };\r\n\r\n    // After we get the key value of the KEY PRESSED --> we want to store it somewhere inorder to use that value.\r\n    // Inother words, we want to gather all the values, for ALL the inputs, and combine them as an object, when the form is submitted.\r\n\r\n    // SO Inorder to store these values, and make sure they survive if the this component/function is re-executed --> WE USE THE \"useState\" HOOK.\r\n\r\n    return (\r\n        <form>\r\n            <div className='expense-form'>\r\n                <div className='expense-form__control'>\r\n                    <label>Title</label>\r\n                    <input type='text' onChange={titleChangeHandler} />\r\n                </div>\r\n\r\n                <div className='expense-form__control'>\r\n                    <label>Amount</label>\r\n                    <input type='number' min='0.01' step='0.01' onChange={amountChangeHandler} />\r\n                </div>\r\n            \r\n                <div className='expense-form__control'>\r\n                    <label>Date</label>\r\n                    <input type='date' min='2019-01-01' max='2022-12-31' onChange={dateChangeHandler} />\r\n                </div>\r\n            </div>          \r\n\r\n            <div className='expense-form__actions'>\r\n                <button type='submit'>Add Expense</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\n\r\nexport default ExpenseForm;"]},"metadata":{},"sourceType":"module"}