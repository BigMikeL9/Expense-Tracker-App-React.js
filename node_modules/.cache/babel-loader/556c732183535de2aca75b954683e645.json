{"ast":null,"code":"import _slicedToArray from\"C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import ExpensesList from\"./ExpensesList\";import Card from\"../UI/Card\";import ExpensesFilter from\"./ExpensesFilter\";import ExpensesChart from\"./ExpensesChart\";import\"./Expenses.css\";// ****** JavaScipt *******\n// The \"map()\" method creates a new array with the results of calling a function for every array element.\n// The \"filter()\" method creates a new array with all elements that pass the test implemented by the provided function.\n// *************************************************************************************************************\n// ****** Conditional Expressions in React *******\n// Long statements like (\"if\" condition and \"for\" loop) are not allowed inside JSX code, between curly braces \"{...}\".\n// INSTEAD we can use a TERNARY EXPRESSION.\n// ie: {filteredExpenses === 0 ? <p>Write a message</p> : // otherwise fo something else}\n// another expression we can use --> {filteredExpenses === 0 && <p>Write a message</p>}  //means if filteredExpenses is equal to 0 --> then add the <p></p> element\n/* same as {if (filteredExpenses === 0) {\r\n              <p>Write a message</p>\r\n           }\r\n           else\r\n           {\r\n            // do something else\r\n           }};    */ // DIDNT USE A TERNARY EXPRESSION HERE THO, INSTEAD I MOVED THE LOGIC OUT OF THE RETURN FUNCTION, SO THAT IT WOULD NOT BE JSX CODE AND\n// AND I CAN USE A REGULAR JAVASCRIPT CONDITION.\n// *************************************************************************************************************\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Expenses=function Expenses(props){var _useState=useState(\"2021\"),_useState2=_slicedToArray(_useState,2),filteredYear=_useState2[0],setFilteredYear=_useState2[1];var filterChangeHandler=function filterChangeHandler(selectedYear){setFilteredYear(selectedYear);console.log(selectedYear);};// this function filters the \"items\" array (which we get from the \"App.js\" file) by the year that we choose from the drop down.\n// \"filteredYear\" is a STRING, where as our \"date\" is a date OBJEC --> which is why we have to \"getFullYear()\" first, and then convert it \"toString()\".\nvar filteredExpenses=props.items.filter(function(filterByYear){return filterByYear.date.getFullYear().toString()===filteredYear;});console.log(filteredExpenses);return/*#__PURE__*/ (/* Must have one ROOT JSX element, that wraps around the main JSX code */_jsxs(Card,{className:\"expenses\",children:[/*#__PURE__*/_jsx(ExpensesFilter,{onChangeFilter:filterChangeHandler,selected:filteredYear}),\" \",/*#__PURE__*/_jsx(ExpensesChart,{expenses:filteredExpenses}),/*#__PURE__*/_jsx(ExpensesList,{passedFilteredExpenses:filteredExpenses}),\" \"]}));};export default Expenses;","map":{"version":3,"sources":["C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/Expenses/Expenses.js"],"names":["React","useState","ExpensesList","Card","ExpensesFilter","ExpensesChart","Expenses","props","filteredYear","setFilteredYear","filterChangeHandler","selectedYear","console","log","filteredExpenses","items","filter","filterByYear","date","getFullYear","toString"],"mappings":"+KAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,IAAP,KAAiB,YAAjB,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,MAAO,gBAAP,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oB,CAEA;AACA;AACA;wFAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAW,CAE1B,cAAwCN,QAAQ,CAAC,MAAD,CAAhD,wCAAOO,YAAP,eAAqBC,eAArB,eAEA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,YAAD,CAAkB,CAC5CF,eAAe,CAACE,YAAD,CAAf,CACAC,OAAO,CAACC,GAAR,CAAYF,YAAZ,EACD,CAHD,CAKA;AACA;AACA,GAAMG,CAAAA,gBAAgB,CAAGP,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAmB,SAAAC,YAAY,QAAIA,CAAAA,YAAY,CAACC,IAAb,CAAkBC,WAAlB,GAAgCC,QAAhC,KAA+CZ,YAAnD,EAA/B,CAAzB,CACAI,OAAO,CAACC,GAAR,CAAYC,gBAAZ,EAGA,oBACE,0EAEA,MAAC,IAAD,EAAM,SAAS,CAAC,UAAhB,wBAEE,KAAC,cAAD,EAAgB,cAAc,CAAEJ,mBAAhC,CAAqD,QAAQ,CAAEF,YAA/D,EAFF,kBAIE,KAAC,aAAD,EAAe,QAAQ,CAAEM,gBAAzB,EAJF,cAKE,KAAC,YAAD,EAAc,sBAAsB,CAAEA,gBAAtC,EALF,OAHF,EAYD,CA3BD,CA6BA,cAAeR,CAAAA,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\nimport \"./Expenses.css\";\r\n\r\n// ****** JavaScipt *******\r\n// The \"map()\" method creates a new array with the results of calling a function for every array element.\r\n// The \"filter()\" method creates a new array with all elements that pass the test implemented by the provided function.\r\n// *************************************************************************************************************\r\n\r\n// ****** Conditional Expressions in React *******\r\n// Long statements like (\"if\" condition and \"for\" loop) are not allowed inside JSX code, between curly braces \"{...}\".\r\n// INSTEAD we can use a TERNARY EXPRESSION.\r\n// ie: {filteredExpenses === 0 ? <p>Write a message</p> : // otherwise fo something else}\r\n// another expression we can use --> {filteredExpenses === 0 && <p>Write a message</p>}  //means if filteredExpenses is equal to 0 --> then add the <p></p> element\r\n/* same as {if (filteredExpenses === 0) {\r\n              <p>Write a message</p>\r\n           }\r\n           else\r\n           {\r\n            // do something else\r\n           }};    */\r\n\r\n// DIDNT USE A TERNARY EXPRESSION HERE THO, INSTEAD I MOVED THE LOGIC OUT OF THE RETURN FUNCTION, SO THAT IT WOULD NOT BE JSX CODE AND\r\n// AND I CAN USE A REGULAR JAVASCRIPT CONDITION.\r\n// *************************************************************************************************************\r\n\r\nconst Expenses = (props) => {\r\n\r\n  const [filteredYear, setFilteredYear] = useState(\"2021\");\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n    console.log(selectedYear);\r\n  };\r\n\r\n  // this function filters the \"items\" array (which we get from the \"App.js\" file) by the year that we choose from the drop down.\r\n  // \"filteredYear\" is a STRING, where as our \"date\" is a date OBJEC --> which is why we have to \"getFullYear()\" first, and then convert it \"toString()\".\r\n  const filteredExpenses = props.items.filter(filterByYear => filterByYear.date.getFullYear().toString() === filteredYear);\r\n  console.log(filteredExpenses);\r\n\r\n\r\n  return (\r\n    /* Must have one ROOT JSX element, that wraps around the main JSX code */\r\n\r\n    <Card className=\"expenses\">\r\n\r\n      <ExpensesFilter onChangeFilter={filterChangeHandler} selected={filteredYear} /> {/* \"selected={filteredYear}\" is to control the initial value \r\n                                                                                           year that is set in the \"useState(\"2021\")\", in the web browser. */ }\r\n      <ExpensesChart expenses={filteredExpenses}/>\r\n      <ExpensesList passedFilteredExpenses={filteredExpenses}/> {/* Need to pass the \"filteredExpenses\" to \"expensesList.js\" */}\r\n\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n"]},"metadata":{},"sourceType":"module"}