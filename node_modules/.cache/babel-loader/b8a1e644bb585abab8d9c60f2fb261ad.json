{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\burni\\\\Desktop\\\\React - Web Dev\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\"; // Event listeners (listens to an event) in React:\n// \"onInput\" ---> listens/triggers on every KEYSTROKE, can only be used for\n// \"onChange\" ---> also listens/triggers on every KEYSTROKE, but the advantage of it is that it can be used for every type of input\n//                 (for example: also for drop menus)\n// \"onSubmit\" ---> if a button with type submit (ie: <button type:\"submit\"> Click Me </button>), is pressed inside of a form in a web browser, then the\n//                 overall <form> HTML element will emmit an event to which we can listen to by adding the \"onSubmit\" event listener as an attribute to\n//                 the form element.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  // After we get the key value of the KEY PRESSED --> we want to store it somewhere inorder to use that value.\n  // Inother words, we want to gather all the values, for ALL the inputs, and combine them as an object, when the form is submitted.\n  // SO Inorder to store these values, and make sure they survive if the this component/function is re-executed --> WE USE THE \"useState\" HOOK.\n  // YOU CAN HAVE MULTIPLE STATES PER COMPONENT/FUNCTION. (each one is seperate from the other)\n  const [titleEntered, setTitleEntered] = useState(\"\");\n  /* We use the \"useState\" HOOK here, inorder to STORE the key press values that we enter in the title input,\r\n                                                         INTO OUR STATE or into a VARIABLE (\"titleEntered\"). \r\n                                                         So that the stored key press values in the state SURVIVES if we re-execute the component.*/\n  // The \"useState\" parameter is an EMPTY STRING, because the initial value of the title input is EMPTY.\n\n  const [amountEntered, setAmountEntered] = useState(\"\");\n  const [dateEntered, setDateEntered] = useState(\"\"); // [DONT USE]\n\n  /* Another way of writing multiple STATES: \r\n       Instead of having multiple states in one component, we can have ONLY ONE state that contains a javascript OBJECT with all of the initial values\r\n       of the things we want to store. \r\n       ie: const [userInput, setUserInput] = useState({\r\n              enteredTitle: \" \",\r\n              enteredAmount: \" \",\r\n              enteredDate: \" \",\r\n           });  \r\n           \r\n           */\n\n  const titleChangeHandler = event => {\n    // The parameter within the Callback function (event) refers to what triggered the event\n    setTitleEntered(event.target.value);\n    /* Stores the KEY press/button that caused the event, into the \"titleEntered\" variable --> using the \r\n                                             \"setTitleEntered\" function */\n\n    console.log(titleEntered); // this is just to make sure that the values are INDEED getting stored in the \"titleEntered\" variable.\n    // [Another way (DONT USE)]\n    // ************************************************** MEMORISE ************************************************\n    // **************** Whenever our State update depends on a PREVIOUS State, use this function form. ***************\n\n    /* setUserInput( (prevState) => { // \"prevState\" refers to the LATEST state snapshot of the \"useState\" funtion's object, keeping all state updates in mind. \r\n            return (\r\n                ...prevState,    // We can use the spread operator to pull all the key-value pairs from the javascript OBJECT, in the prevState function (which its values come from the useState function's object), and adds it to the new object (\"setUserInput\")\r\n                enteredTitle: event.target.value,  // and then override the value we want to change\r\n            );\r\n        }); */\n  };\n\n  const amountChangeHandler = event => {\n    setAmountEntered(event.target.value); // [Another way (DONT USE)]\n\n    /* setUserInput( (prevState) => {\r\n            return (\r\n                ...prevState,    \r\n                enteredAmount: event.target.value,\r\n           }); */\n  };\n\n  const dateChangeHandler = event => {\n    setDateEntered(event.target.value); // [Another way (DONT USE)]\n\n    /* setUserInput( (prevState) => {\r\n            return (\r\n                ...prevState,    \r\n                enteredDate: event.target.value,\r\n           }); */\n  };\n\n  const formHandler = event => {\n    // \"event\" refers to what triggered the event (ie: when we click the submit button)\n\n    /* Whenever we click the SUBMIT button (inside the form element), the web browser refreshes the web page by default, which is NOT WHAT WE WANT. \r\n           We want to handle the form submission through javascript, inorder to manually collect and combine the data into an object and do something with it.\r\n           So we use the \"preventDefault()\" which is a default javascript method. So it prevents refreshing the page when the submit button is clicked, because \r\n           it doesn't actually submit the data or do anything. */\n    event.preventDefault(); // This object combines all the entered data.\n\n    const expenseData = {\n      title: titleEntered,\n      // \"titleEntered\" refers to the variable in the destructing array, in which we store the data entered in the title input element.\n      amount: amountEntered,\n      date: new Date(dateEntered) // parses the date string (\"dateEntered\") and converts it into a date object.\n\n    };\n    console.log(expenseData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formHandler,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-form__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\" // This is TWO-WAY BINDING ****\n          ,\n          value: titleEntered // passes a new value into the input, so that we can reset or change the input programmtaically (THIS )\n          ,\n          onChange: titleChangeHandler // listens to changes in the input to update the state\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-form__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-form__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-form__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseForm, \"sJvDYNUio1JZBb5QdycjEL0B0kI=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","titleEntered","setTitleEntered","amountEntered","setAmountEntered","dateEntered","setDateEntered","titleChangeHandler","event","target","value","console","log","amountChangeHandler","dateChangeHandler","formHandler","preventDefault","expenseData","title","amount","date","Date"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\n// Event listeners (listens to an event) in React:\r\n// \"onInput\" ---> listens/triggers on every KEYSTROKE, can only be used for\r\n// \"onChange\" ---> also listens/triggers on every KEYSTROKE, but the advantage of it is that it can be used for every type of input\r\n//                 (for example: also for drop menus)\r\n// \"onSubmit\" ---> if a button with type submit (ie: <button type:\"submit\"> Click Me </button>), is pressed inside of a form in a web browser, then the\r\n//                 overall <form> HTML element will emmit an event to which we can listen to by adding the \"onSubmit\" event listener as an attribute to\r\n//                 the form element.\r\n\r\n\r\n\r\nconst ExpenseForm = () => {\r\n  // After we get the key value of the KEY PRESSED --> we want to store it somewhere inorder to use that value.\r\n  // Inother words, we want to gather all the values, for ALL the inputs, and combine them as an object, when the form is submitted.\r\n\r\n  // SO Inorder to store these values, and make sure they survive if the this component/function is re-executed --> WE USE THE \"useState\" HOOK.\r\n\r\n  // YOU CAN HAVE MULTIPLE STATES PER COMPONENT/FUNCTION. (each one is seperate from the other)\r\n\r\n  const [titleEntered, setTitleEntered] =\r\n    useState(\r\n      \"\"\r\n    ); /* We use the \"useState\" HOOK here, inorder to STORE the key press values that we enter in the title input,\r\n                                                              INTO OUR STATE or into a VARIABLE (\"titleEntered\"). \r\n                                                              So that the stored key press values in the state SURVIVES if we re-execute the component.*/\r\n  // The \"useState\" parameter is an EMPTY STRING, because the initial value of the title input is EMPTY.\r\n\r\n  const [amountEntered, setAmountEntered] = useState(\"\");\r\n  const [dateEntered, setDateEntered] = useState(\"\");\r\n\r\n  // [DONT USE]\r\n  /* Another way of writing multiple STATES: \r\n       Instead of having multiple states in one component, we can have ONLY ONE state that contains a javascript OBJECT with all of the initial values\r\n       of the things we want to store. \r\n       ie: const [userInput, setUserInput] = useState({\r\n              enteredTitle: \" \",\r\n              enteredAmount: \" \",\r\n              enteredDate: \" \",\r\n           });  \r\n           \r\n           */\r\n\r\n  const titleChangeHandler = (event) => {\r\n    // The parameter within the Callback function (event) refers to what triggered the event\r\n    setTitleEntered(\r\n      event.target.value\r\n    ); /* Stores the KEY press/button that caused the event, into the \"titleEntered\" variable --> using the \r\n                                                \"setTitleEntered\" function */\r\n    console.log(titleEntered); // this is just to make sure that the values are INDEED getting stored in the \"titleEntered\" variable.\r\n\r\n    // [Another way (DONT USE)]\r\n    // ************************************************** MEMORISE ************************************************\r\n    // **************** Whenever our State update depends on a PREVIOUS State, use this function form. ***************\r\n    /* setUserInput( (prevState) => { // \"prevState\" refers to the LATEST state snapshot of the \"useState\" funtion's object, keeping all state updates in mind. \r\n            return (\r\n                ...prevState,    // We can use the spread operator to pull all the key-value pairs from the javascript OBJECT, in the prevState function (which its values come from the useState function's object), and adds it to the new object (\"setUserInput\")\r\n                enteredTitle: event.target.value,  // and then override the value we want to change\r\n            );\r\n        }); */\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n    setAmountEntered(event.target.value);\r\n\r\n    // [Another way (DONT USE)]\r\n    /* setUserInput( (prevState) => {\r\n            return (\r\n                ...prevState,    \r\n                enteredAmount: event.target.value,\r\n           }); */\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    setDateEntered(event.target.value);\r\n\r\n    // [Another way (DONT USE)]\r\n    /* setUserInput( (prevState) => {\r\n            return (\r\n                ...prevState,    \r\n                enteredDate: event.target.value,\r\n           }); */\r\n  };\r\n\r\n\r\n  const formHandler = (event) => {\r\n    // \"event\" refers to what triggered the event (ie: when we click the submit button)\r\n    /* Whenever we click the SUBMIT button (inside the form element), the web browser refreshes the web page by default, which is NOT WHAT WE WANT. \r\n           We want to handle the form submission through javascript, inorder to manually collect and combine the data into an object and do something with it.\r\n           So we use the \"preventDefault()\" which is a default javascript method. So it prevents refreshing the page when the submit button is clicked, because \r\n           it doesn't actually submit the data or do anything. */\r\n    event.preventDefault();\r\n\r\n    // This object combines all the entered data.\r\n    const expenseData = {\r\n      title: titleEntered, // \"titleEntered\" refers to the variable in the destructing array, in which we store the data entered in the title input element.\r\n      amount: amountEntered,\r\n      date: new Date(dateEntered), // parses the date string (\"dateEntered\") and converts it into a date object.\r\n    };\r\n\r\n    console.log(expenseData);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={formHandler}>\r\n      {\" \"}\r\n      {/* we want to execute a function when this form is being submitted, through the \"onSubmit\" event listener. */}\r\n      <div className=\"expense-form\">\r\n        <div className=\"expense-form__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            // This is TWO-WAY BINDING ****\r\n            value={titleEntered} // passes a new value into the input, so that we can reset or change the input programmtaically (THIS )\r\n            onChange={titleChangeHandler} // listens to changes in the input to update the state\r\n          />\r\n        </div>\r\n\r\n        <div className=\"expense-form__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"expense-form__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"expense-form__actions\">\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n"]},"metadata":{},"sourceType":"module"}