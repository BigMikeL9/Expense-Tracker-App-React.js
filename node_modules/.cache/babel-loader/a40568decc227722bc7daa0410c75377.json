{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\burni\\\\Desktop\\\\React - Web Dev\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\Expenses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport Card from \"../UI/Card\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport \"./Expenses.css\"; // ****** JavaScipt *******\n// The \"map()\" method creates a new array with the results of calling a function for every array element.\n// The \"filter()\" method creates a new array with all elements that pass the test implemented by the provided function.\n// *************************************************************************************************************\n// ****** Conditional Expressions in React *******\n// Long statements like (\"if\" condition and \"for\" loop) are not allowed inside JSX code, between curly braces \"{...}\".\n// INSTEAD we can use a TERNARY EXPRESSION.\n// ie: {filteredExpenses === 0 ? <p>Write a message</p> : // otherwise fo something else}\n\n/* same as {if (filteredExpenses === 0) {\r\n              <p>Write a message</p>\r\n           }\r\n           else\r\n           {\r\n            // do something else\r\n           }};    */\n// DIDNT USE A TERNARY EXPRESSION HERE THO, INSTEAD I MOVED THE LOGIC OUT OF THE RETURN FUNCTION, SO THAT IT WOULD NOT BE JSX CODE AND\n// AND I CAN USE A REGULAR JAVASCRIPT CONDITION.\n// *************************************************************************************************************\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Expenses = props => {\n  _s();\n\n  const [filteredYear, setFilteredYear] = useState(\"2021\");\n\n  const filterChangeHandler = selectedYear => {\n    setFilteredYear(selectedYear);\n    console.log(selectedYear);\n  }; // this function filters the \"items\" array (which we get from the \"App.js\" file) by the year that we choose from the drop down.\n  // \"filteredYear\" is a STRING, where as our \"date\" is a date OBJEC --> which is why we have to \"getFullYear()\" first, and then convert it \"toString()\".\n\n\n  const filteredExpenses = props.items.filter(filterByYear => filterByYear.date.getFullYear().toString() === filteredYear);\n  console.log(filteredExpenses); // If we have no registered expenses for a specific year ---> display a message \n\n  let noExpenseMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No Expenses Found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 26\n  }, this);\n\n  if (filteredExpenses > 0) {\n    let noExpensesFound = filteredExpenses.map(expense => /*#__PURE__*/_jsxDEV(ExpenseItem, {\n      // **** always add a KEY when mapping out a list of items, inorder to avoid errors in the console. React needs to uniquely identify every element it adds inorder to be efficient and not go over the whole list of items everytime we add a new item. If we dont add a KEY, react will update ALL the items in the array and replaces their content such that they match the old content of the array, after adding the new item. WHICH IS INEFFIECIENT performance wise AND CAN CAUSE BUGS.\n      title: expense.title,\n      date: expense.date,\n      amount: expense.amount\n    }, expense.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this));\n  }\n\n  return (\n    /*#__PURE__*/\n\n    /* Must have one ROOT JSX element, that wraps around the main JSX code */\n    _jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        onChangeFilter: filterChangeHandler,\n        selected: filteredYear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(Expenses, \"mdIsaHWtxuZbTDv6nUGN/ApvXr0=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/Expenses/Expenses.js"],"names":["React","useState","ExpenseItem","Card","ExpensesFilter","Expenses","props","filteredYear","setFilteredYear","filterChangeHandler","selectedYear","console","log","filteredExpenses","items","filter","filterByYear","date","getFullYear","toString","noExpenseMessage","noExpensesFound","map","expense","title","amount","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAO,gBAAP,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,MAAD,CAAhD;;AAEA,QAAMQ,mBAAmB,GAAIC,YAAD,IAAkB;AAC5CF,IAAAA,eAAe,CAACE,YAAD,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACD,GAHD,CAH0B,CAQ1B;AACA;;;AACA,QAAMG,gBAAgB,GAAGP,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAmBC,YAAY,IAAIA,YAAY,CAACC,IAAb,CAAkBC,WAAlB,GAAgCC,QAAhC,OAA+CZ,YAAlF,CAAzB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYC,gBAAZ,EAX0B,CAa1B;;AACA,MAAIO,gBAAgB,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAvB;;AAEA,MAAIP,gBAAgB,GAAG,CAAvB,EAA0B;AAExB,QAAIQ,eAAe,GAAGR,gBAAgB,CAACS,GAAjB,CAAsBC,OAAD,iBACzC,QAAC,WAAD;AACqB;AACnB,MAAA,KAAK,EAAEA,OAAO,CAACC,KAFjB;AAGE,MAAA,IAAI,EAAED,OAAO,CAACN,IAHhB;AAIE,MAAA,MAAM,EAAEM,OAAO,CAACE;AAJlB,OACOF,OAAO,CAACG,EADf;AAAA;AAAA;AAAA;AAAA,YADoB,CAAtB;AASD;;AAED;AAAA;;AACE;AAEA,YAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA,8BAEE,QAAC,cAAD;AAAgB,QAAA,cAAc,EAAEjB,mBAAhC;AAAqD,QAAA,QAAQ,EAAEF;AAA/D;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF;AAeD,CA5CD;;GAAMF,Q;;KAAAA,Q;AA8CN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport \"./Expenses.css\";\r\n\r\n// ****** JavaScipt *******\r\n// The \"map()\" method creates a new array with the results of calling a function for every array element.\r\n// The \"filter()\" method creates a new array with all elements that pass the test implemented by the provided function.\r\n// *************************************************************************************************************\r\n\r\n// ****** Conditional Expressions in React *******\r\n// Long statements like (\"if\" condition and \"for\" loop) are not allowed inside JSX code, between curly braces \"{...}\".\r\n// INSTEAD we can use a TERNARY EXPRESSION.\r\n// ie: {filteredExpenses === 0 ? <p>Write a message</p> : // otherwise fo something else}\r\n/* same as {if (filteredExpenses === 0) {\r\n              <p>Write a message</p>\r\n           }\r\n           else\r\n           {\r\n            // do something else\r\n           }};    */\r\n\r\n// DIDNT USE A TERNARY EXPRESSION HERE THO, INSTEAD I MOVED THE LOGIC OUT OF THE RETURN FUNCTION, SO THAT IT WOULD NOT BE JSX CODE AND\r\n// AND I CAN USE A REGULAR JAVASCRIPT CONDITION.\r\n// *************************************************************************************************************\r\n\r\nconst Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState(\"2021\");\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n    console.log(selectedYear);\r\n  };\r\n\r\n  // this function filters the \"items\" array (which we get from the \"App.js\" file) by the year that we choose from the drop down.\r\n  // \"filteredYear\" is a STRING, where as our \"date\" is a date OBJEC --> which is why we have to \"getFullYear()\" first, and then convert it \"toString()\".\r\n  const filteredExpenses = props.items.filter(filterByYear => filterByYear.date.getFullYear().toString() === filteredYear);\r\n  console.log(filteredExpenses);\r\n\r\n  // If we have no registered expenses for a specific year ---> display a message \r\n  let noExpenseMessage = <p>No Expenses Found</p>;\r\n\r\n  if (filteredExpenses > 0) {\r\n\r\n    let noExpensesFound = filteredExpenses.map((expense) => (\r\n      <ExpenseItem\r\n        key={expense.id}   // **** always add a KEY when mapping out a list of items, inorder to avoid errors in the console. React needs to uniquely identify every element it adds inorder to be efficient and not go over the whole list of items everytime we add a new item. If we dont add a KEY, react will update ALL the items in the array and replaces their content such that they match the old content of the array, after adding the new item. WHICH IS INEFFIECIENT performance wise AND CAN CAUSE BUGS.\r\n        title={expense.title}\r\n        date={expense.date}\r\n        amount={expense.amount}\r\n      />\r\n    ))\r\n\r\n  }\r\n\r\n  return (\r\n    /* Must have one ROOT JSX element, that wraps around the main JSX code */\r\n\r\n    <Card className=\"expenses\">\r\n\r\n      <ExpensesFilter onChangeFilter={filterChangeHandler} selected={filteredYear} /> {/* \"selected={filteredYear}\" is to control the initial value \r\n                                                                                           year that is set in the \"useState(\"2021\")\", in the web browser. */ }\r\n      \r\n                                                                                  \r\n      \r\n      \r\n      \r\n      \r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n"]},"metadata":{},"sourceType":"module"}