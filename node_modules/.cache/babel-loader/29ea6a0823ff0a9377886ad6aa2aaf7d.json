{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\burni\\\\Desktop\\\\React - Web Dev\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\Expenses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport Card from \"../UI/Card\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport \"./Expenses.css\"; // ****** JavaScipt *******\n// The \"map()\" method creates a new array with the results of calling a function for every array element.\n// The \"filter()\" method creates a new array with all elements that pass the test implemented by the provided function.\n// *************************************************************************************************************\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Expenses = props => {\n  _s();\n\n  const [filteredYear, setFilteredYear] = useState(\"2021\");\n\n  const filterChangeHandler = selectedYear => {\n    setFilteredYear(selectedYear);\n    console.log(selectedYear);\n  }; // this function filters the \"items\" array (which we get from the \"App.js\" file) by the year that we choose from the drop down.\n  // \"filteredYear\" is a STRING, where as our \"date\" is a date OBJEC --> which is why we have to \n\n\n  const filteredExpenses = props.items.filter(filterByYear => filterByYear.date.getFullYear().toString() === filteredYear);\n  console.log(filteredExpenses);\n  return (\n    /*#__PURE__*/\n\n    /* Must have one ROOT JSX element, that wraps around the main JSX code */\n    _jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        onChangeFilter: filterChangeHandler,\n        selected: filteredYear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, this), \" \", filteredExpenses.map(expense => /*#__PURE__*/_jsxDEV(ExpenseItem, {\n        // **** always add a KEY when mapping out a list of items, inorder to avoid errors in the console. React needs to uniquely identify every element it adds inorder to be efficient and not go over the whole list of items everytime we add a new item. If we dont add a KEY, react will update ALL the items in the array and replaces their content such that they match the old content of the array, after adding the new item. WHICH IS INEFFIECIENT performance wise AND CAN CAUSE BUGS.\n        title: expense.title,\n        date: expense.date,\n        amount: expense.amount\n      }, expense.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(Expenses, \"mdIsaHWtxuZbTDv6nUGN/ApvXr0=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/Expenses/Expenses.js"],"names":["React","useState","ExpenseItem","Card","ExpensesFilter","Expenses","props","filteredYear","setFilteredYear","filterChangeHandler","selectedYear","console","log","filteredExpenses","items","filter","filterByYear","date","getFullYear","toString","map","expense","title","amount","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAO,gBAAP,C,CAEA;AACA;AACA;AACA;;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,MAAD,CAAhD;;AAEA,QAAMQ,mBAAmB,GAAIC,YAAD,IAAkB;AAC5CF,IAAAA,eAAe,CAACE,YAAD,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACD,GAHD,CAH0B,CAQ1B;AACA;;;AACA,QAAMG,gBAAgB,GAAGP,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAmBC,YAAY,IAAIA,YAAY,CAACC,IAAb,CAAkBC,WAAlB,GAAgCC,QAAhC,OAA+CZ,YAAlF,CAAzB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYC,gBAAZ;AAEA;AAAA;;AACE;AAEA,YAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA,8BAEE,QAAC,cAAD;AAAgB,QAAA,cAAc,EAAEJ,mBAAhC;AAAqD,QAAA,QAAQ,EAAEF;AAA/D;AAAA;AAAA;AAAA;AAAA,cAFF,OAaGM,gBAAgB,CAACO,GAAjB,CAAsBC,OAAD,iBACpB,QAAC,WAAD;AACqB;AACnB,QAAA,KAAK,EAAEA,OAAO,CAACC,KAFjB;AAGE,QAAA,IAAI,EAAED,OAAO,CAACJ,IAHhB;AAIE,QAAA,MAAM,EAAEI,OAAO,CAACE;AAJlB,SACOF,OAAO,CAACG,EADf;AAAA;AAAA;AAAA;AAAA,cADD,CAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF;AA2BD,CAxCD;;GAAMnB,Q;;KAAAA,Q;AA0CN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport \"./Expenses.css\";\r\n\r\n// ****** JavaScipt *******\r\n// The \"map()\" method creates a new array with the results of calling a function for every array element.\r\n// The \"filter()\" method creates a new array with all elements that pass the test implemented by the provided function.\r\n// *************************************************************************************************************\r\n\r\nconst Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState(\"2021\");\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n    console.log(selectedYear);\r\n  };\r\n\r\n  // this function filters the \"items\" array (which we get from the \"App.js\" file) by the year that we choose from the drop down.\r\n  // \"filteredYear\" is a STRING, where as our \"date\" is a date OBJEC --> which is why we have to \r\n  const filteredExpenses = props.items.filter(filterByYear => filterByYear.date.getFullYear().toString() === filteredYear);\r\n  console.log(filteredExpenses);\r\n\r\n  return (\r\n    /* Must have one ROOT JSX element, that wraps around the main JSX code */\r\n\r\n    <Card className=\"expenses\">\r\n\r\n      <ExpensesFilter onChangeFilter={filterChangeHandler} selected={filteredYear} /> {/* \"selected={filteredYear}\" is to control the initial value \r\n                                                                                           year that is set in the \"useState(\"2021\")\", in the web browser. */ }\r\n      \r\n                                                                                  \r\n      {/* Rendering the \"expenses\" Array (in \"App.js\") Dynamically \r\n            1. Creat curly braces \"{...}* because we will execute a dynamic javascript expression in JSX code, which is why we need the curly braces.\r\n            2. Reference the \"expenses\" array (in \"App.js\") through \"props\" and its attribute name in the \"<expenses />\" custom element. (ie: \"props.items\")\r\n            3. Use the \"map()\" javascript function to create a new array (through its paramter), based on another array (\"expenses\" array in this case,\r\n               which we acces through \"props.items\")\r\n          SO FOR EACH OBJECT IN THE \"expense\" ARRAY, \"map()\" creates a new \"ExpenseItem\" with the properties from the corresponding \"expense\" array object.  */}\r\n      \r\n      {filteredExpenses.map((expense) => (\r\n        <ExpenseItem\r\n          key={expense.id}   // **** always add a KEY when mapping out a list of items, inorder to avoid errors in the console. React needs to uniquely identify every element it adds inorder to be efficient and not go over the whole list of items everytime we add a new item. If we dont add a KEY, react will update ALL the items in the array and replaces their content such that they match the old content of the array, after adding the new item. WHICH IS INEFFIECIENT performance wise AND CAN CAUSE BUGS.\r\n          title={expense.title}\r\n          date={expense.date}\r\n          amount={expense.amount}\r\n        />\r\n      ))}\r\n      \r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n"]},"metadata":{},"sourceType":"module"}