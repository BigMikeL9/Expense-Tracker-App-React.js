{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\burni\\\\Desktop\\\\React - Web Dev\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\ExpenseItem.js\";\nimport React from \"react\"; // In previous versions of React we HAD to add this React import, which transforms JSX code (under the hood) \n// to HTML code that is readable by the browser. JSX (HTML in Javascript) is NOT READABLE by the browser.\n// In newer versions of react tho, we dont need this import, but the code is STILL being transformed to HTML \n// code, under the hood. [This was added to every single file in REACT back in the day.]\n\nimport ExpenseDate from \"./ExpenseDate\";\nimport Card from \"../UI/Card\"; // **************** Importing other CSS files here ****************\n// When adding css code --> create a file in the components folder with the same name as the component file\n// ie: \"ExpenseItem.css\"\n// Then we need to import the css file here [AT THE TOP]\n\nimport \"./ExpenseItem.css\"; // **************** How to name Component files in react ****************\n// When naming component files in react, every word in capitalized. Ex: \"ExpenseItem.js\"\n// *** It is considered good practice to create new files for different components, so that we have one file per component.\n// ***********************************************************************************************************************************\n// **************** What is a Component? ****************\n// A COMPONENT IN REACT, IS JUST A JAVASCRIPT FUNCTION that returns JSX code.\n// The conventional way of naming a function in a component in react, is to name it the same thing as the file name.\n// ***********************************************************************************************************************************\n// ****************************** ONE ROOT element in the return function ******************************\n// In React there is an important RULE regarding the JSX code (HTML code in Javascript), that we return inside a component:\n// *** Which is that it MUST ONLY have ONE ROOT ELEMENT per RETURN STATEMENT (or JSX code snippet).\n// For example: We can't have two divs next to each other, ie: <div>....</div><div>...</div> [NOT ALLOWED BY REACT]\n// **** The way around it is to wrap all of the elements inside ONE ROOT/MAIN div -->>\n// ***********************************************************************************************************************************\n// ****************************** How to use Javascript in JSX code ******************************\n// To output dynamic data (data that can be changed by the user) we use a special syntax by React, INSIDE of the JSX code snippets.\n// The special syntax is curly braces\"{}\" where javascript expressions can be insert into.\n// ***********************************************************************************************************************************\n// ************************************* HOW TO SHARE DATA BETWEEN REACT COMPONENTS *************************************************\n// **************** We make functions in components reusable, by giving it a parameter (\"props\") ****************\n// SECOND PART\n// In React, Only ONE PARAMTER is needed to hold ALL of the received attributes as properties, hence its name \"Props\"\n// All received properties come from the \"App.js\" file, where we create a custom React element that takes in attribites with the properties\n// This ONE PARAMATER is ussaully named \"props\" (can be named anything tho). It is a Javascript OBJECT, which is why it can hold all of\n// the attribute properties for our custom element that are stated in the \"App.js\" file.\n\n/* FINALLY, after we create the properties and insert them into the custom React elements in the \"App.js\", we THEN add the \"props\" parameter\r\n   to the function here --> then reference to attributes we created in the \"App.js\" by using their \"key\" names, otherwise it wont't work\r\n    (ie: props.{name of the attribute we stated in the \"App.js\"} )*/\n// IN SHORT --> WE GET ALL THE DATA WE NEED FROM OUTSIDE OF THIS COMPONENT (\"App.js\"), AND USE IT HERE BY ACCESSING THIS\n//            DATA/PROPERTIES THROUGH A PARAMeTER (\"props\").\n// SO the properties are defined in \"App.js\" and then passed here, inorder to have different usages, through attributes.\n// ***********************************************************************************************************************************\n// ****************************** Adding Events in REACT ******************************\n// Ex:   <button onClick={ () => {console.log(\"Button Clickedd!!!\")} }> Click me </button> \n// In react you add an EVENT to the button element (as an attribute), that does something when the button is clicked.\n// All react EVENTS start with \"on....\". ie: \"onclick\"\n// ***Anonymous Arrow function*** ----> () => {....}\n// ********** EVENTS IN React takes in Javascript functions ONLY. (ie: onclick = { () => {.......} } )\n// ***********************************************************************************************************************************\n// ARROW FUNCTION \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseItem = props => {\n  // ******** Javascript ********\n  // A \"const\" is a variable that may never change.\n  // \"Date()\" is a built-in constructor that comes witH JavaScript.\n  // \"toISOString()\" returns a Date object as a String, using the ISO standard.\n  // \"toLocaleString()\" method returns a string with a language sensitive representation of this date.\n  // \"getFullYear()\" method returns the year of the specified date according to local time.\n  const onClickEvent = () => {\n    console.log(\"Button Clicked!!\");\n  };\n\n  return (\n    /*#__PURE__*/\n\n    /* \"Card\" is a special kind of component that can act as a ROOT/Wrapper custom element (check its file) */\n    _jsxDEV(Card, {\n      className: \"expense-item\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__description\",\n        children: [/*#__PURE__*/_jsxDEV(ExpenseDate, {\n          date: props.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: props.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__price\",\n        children: [\"$\", props.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClickEvent,\n        children: \" Click me \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this)\n  );\n}; // to use the component, we need to export it or export the function in this file. (**write the name of the function, WITHOUT BRACES)\n\n\n_c = ExpenseItem;\nexport default ExpenseItem; // after exporting this file, we can then import it in the \"App.js\" file where all the other components will be imported or nested to.\n// Summary: WE ALWAYS DO THESE STEPS WHEN CREATING A NEW COMPONENT IN REACT ==>\n//           1. Create a component file and add a function which return HTML code (just like this one)\n//           2. We then \"export\" it (in the same file)\n//           3. Then \"import\" it in the file that we want to use it in (\"ussually \"App.js\").\n//           4. There we can Use it like an HTML element [but starting with an uppercase character] in the file\n//              it is imported in (ussually the \"App.js\" file).\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseItem\");","map":{"version":3,"sources":["C:/Users/burni/Desktop/React - Web Dev/01-starting-setup/src/components/Expenses/ExpenseItem.js"],"names":["React","ExpenseDate","Card","ExpenseItem","props","onClickEvent","console","log","date","title","amount"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAA2B;AACE;AACD;AACA;;AAC5B,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,YAAjB,C,CAEA;AACA;AACA;AACA;;AACA,OAAO,mBAAP,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACI;AACA;AACA;AACA;AACJ;AAGA;;;;AACA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,YAAY,GAAG,MAAM;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,GAFD;;AAIA;AAAA;;AACE;AAEA,YAAC,IAAD;AAAM,MAAA,SAAS,EAAC,cAAhB;AAAA,mCAEE;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA,gCAGE,QAAC,WAAD;AAAa,UAAA,IAAI,EAAEH,KAAK,CAACI;AAAzB;AAAA;AAAA;AAAA;AAAA,gBAHF,oBAME;AAAA,oBAAKJ,KAAK,CAACK;AAAX;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAWE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,wBAAuCL,KAAK,CAACM,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,eAYE;AAAQ,QAAA,OAAO,EAAGL,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF;AAmBD,CA/BD,C,CAiCA;;;KAjCMF,W;AAkCN,eAAeA,WAAf,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\"; // In previous versions of React we HAD to add this React import, which transforms JSX code (under the hood) \r\n                             // to HTML code that is readable by the browser. JSX (HTML in Javascript) is NOT READABLE by the browser.\r\n                            // In newer versions of react tho, we dont need this import, but the code is STILL being transformed to HTML \r\n                            // code, under the hood. [This was added to every single file in REACT back in the day.]\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport Card from \"../UI/Card\";\r\n\r\n// **************** Importing other CSS files here ****************\r\n// When adding css code --> create a file in the components folder with the same name as the component file\r\n// ie: \"ExpenseItem.css\"\r\n// Then we need to import the css file here [AT THE TOP]\r\nimport \"./ExpenseItem.css\";\r\n\r\n// **************** How to name Component files in react ****************\r\n// When naming component files in react, every word in capitalized. Ex: \"ExpenseItem.js\"\r\n// *** It is considered good practice to create new files for different components, so that we have one file per component.\r\n// ***********************************************************************************************************************************\r\n\r\n// **************** What is a Component? ****************\r\n// A COMPONENT IN REACT, IS JUST A JAVASCRIPT FUNCTION that returns JSX code.\r\n// The conventional way of naming a function in a component in react, is to name it the same thing as the file name.\r\n// ***********************************************************************************************************************************\r\n\r\n// ****************************** ONE ROOT element in the return function ******************************\r\n// In React there is an important RULE regarding the JSX code (HTML code in Javascript), that we return inside a component:\r\n// *** Which is that it MUST ONLY have ONE ROOT ELEMENT per RETURN STATEMENT (or JSX code snippet).\r\n// For example: We can't have two divs next to each other, ie: <div>....</div><div>...</div> [NOT ALLOWED BY REACT]\r\n// **** The way around it is to wrap all of the elements inside ONE ROOT/MAIN div -->>\r\n// ***********************************************************************************************************************************\r\n\r\n// ****************************** How to use Javascript in JSX code ******************************\r\n// To output dynamic data (data that can be changed by the user) we use a special syntax by React, INSIDE of the JSX code snippets.\r\n// The special syntax is curly braces\"{}\" where javascript expressions can be insert into.\r\n// ***********************************************************************************************************************************\r\n\r\n// ************************************* HOW TO SHARE DATA BETWEEN REACT COMPONENTS *************************************************\r\n// **************** We make functions in components reusable, by giving it a parameter (\"props\") ****************\r\n// SECOND PART\r\n// In React, Only ONE PARAMTER is needed to hold ALL of the received attributes as properties, hence its name \"Props\"\r\n// All received properties come from the \"App.js\" file, where we create a custom React element that takes in attribites with the properties\r\n// This ONE PARAMATER is ussaully named \"props\" (can be named anything tho). It is a Javascript OBJECT, which is why it can hold all of\r\n// the attribute properties for our custom element that are stated in the \"App.js\" file.\r\n/* FINALLY, after we create the properties and insert them into the custom React elements in the \"App.js\", we THEN add the \"props\" parameter\r\n   to the function here --> then reference to attributes we created in the \"App.js\" by using their \"key\" names, otherwise it wont't work\r\n    (ie: props.{name of the attribute we stated in the \"App.js\"} )*/\r\n\r\n// IN SHORT --> WE GET ALL THE DATA WE NEED FROM OUTSIDE OF THIS COMPONENT (\"App.js\"), AND USE IT HERE BY ACCESSING THIS\r\n//            DATA/PROPERTIES THROUGH A PARAMeTER (\"props\").\r\n// SO the properties are defined in \"App.js\" and then passed here, inorder to have different usages, through attributes.\r\n\r\n// ***********************************************************************************************************************************\r\n\r\n\r\n// ****************************** Adding Events in REACT ******************************\r\n// Ex:   <button onClick={ () => {console.log(\"Button Clickedd!!!\")} }> Click me </button> \r\n    // In react you add an EVENT to the button element (as an attribute), that does something when the button is clicked.\r\n    // All react EVENTS start with \"on....\". ie: \"onclick\"\r\n    // ***Anonymous Arrow function*** ----> () => {....}\r\n    // ********** EVENTS IN React takes in Javascript functions ONLY. (ie: onclick = { () => {.......} } )\r\n// ***********************************************************************************************************************************\r\n\r\n\r\n// ARROW FUNCTION \r\nconst ExpenseItem = (props) => {\r\n  // ******** Javascript ********\r\n  // A \"const\" is a variable that may never change.\r\n  // \"Date()\" is a built-in constructor that comes witH JavaScript.\r\n  // \"toISOString()\" returns a Date object as a String, using the ISO standard.\r\n  // \"toLocaleString()\" method returns a string with a language sensitive representation of this date.\r\n  // \"getFullYear()\" method returns the year of the specified date according to local time.\r\n\r\n  const onClickEvent = () => {\r\n    console.log(\"Button Clicked!!\")\r\n  };\r\n\r\n  return (\r\n    /* \"Card\" is a special kind of component that can act as a ROOT/Wrapper custom element (check its file) */\r\n\r\n    <Card className=\"expense-item\"> {/* This is the ROOT/MAIN element which wraps all the JSX code inside */}\r\n      \r\n      <div className=\"expense-item__description\">\r\n\r\n        {/* The date properties are coming from the \"App.js\" \"expenses\" javascript object, and getting fed to the \"expenseDate\" */}\r\n        <ExpenseDate date={props.date} /> {/* If we have no content between the opening an closing tags of a react element, we can \r\n                            write it as a self closing element. */}\r\n\r\n        <h2>{props.title}</h2>\r\n      </div>\r\n\r\n      <div className=\"expense-item__price\">${props.amount}</div>\r\n      <button onClick={ onClickEvent }> Click me </button> \r\n\r\n    </Card>\r\n  );\r\n}\r\n\r\n// to use the component, we need to export it or export the function in this file. (**write the name of the function, WITHOUT BRACES)\r\nexport default ExpenseItem;\r\n\r\n// after exporting this file, we can then import it in the \"App.js\" file where all the other components will be imported or nested to.\r\n\r\n// Summary: WE ALWAYS DO THESE STEPS WHEN CREATING A NEW COMPONENT IN REACT ==>\r\n//           1. Create a component file and add a function which return HTML code (just like this one)\r\n//           2. We then \"export\" it (in the same file)\r\n//           3. Then \"import\" it in the file that we want to use it in (\"ussually \"App.js\").\r\n//           4. There we can Use it like an HTML element [but starting with an uppercase character] in the file\r\n//              it is imported in (ussually the \"App.js\" file).\r\n"]},"metadata":{},"sourceType":"module"}